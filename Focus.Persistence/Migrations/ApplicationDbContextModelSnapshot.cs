// <auto-generated />
using System;
using Focus.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Focus.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Focus.Business.Users.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<Guid?>("BankId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsProceed")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid?>("OnlineTerminalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TerminalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "5f8d5614-2c7e-4ec0-868c-d254e6516b4d",
                            AccessFailedCount = 0,
                            CompanyId = new Guid("5f8d5614-2c7e-4ec0-868c-d254e6516b4d"),
                            ConcurrencyStamp = "117c7248-5202-44d5-a7eb-8f2717eba7e9",
                            Email = "noble@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Noble App",
                            IsActive = false,
                            IsProceed = false,
                            LastName = "",
                            LockoutEnabled = true,
                            NormalizedEmail = "noble@gmail.com",
                            NormalizedUserName = "NOBLE@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEEMJll7GgXWk1z2fatxJWFPeucssBaOZ+EXMY5MYkhRNow+oaTxB0nH+sWvTX6wKWA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "HDM6TKME4T5DISZCHW3MHD6YLQFNSWC2",
                            TwoFactorEnabled = false,
                            UserName = "noble@gmail.com"
                        });
                });

            modelBuilder.Entity("Focus.Domain.Entities.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CostCenterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NameArabic")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CostCenterId");

                    b.HasIndex("Code", "CompanyId")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("Code", "CompanyId"), false);

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("Focus.Domain.Entities.AccountsLevelOne", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NameArabic")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("Code", "CompanyId")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("Code", "CompanyId"), false);

                    b.ToTable("AccountsLevelOne");
                });

            modelBuilder.Entity("Focus.Domain.Entities.AccountsLevelTwo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameArabic")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("AccountsLevelTwo");
                });

            modelBuilder.Entity("Focus.Domain.Entities.AccountTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("JsonTemplate")
                        .HasMaxLength(2147483647)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("NameArabic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("AccountTemplates");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ecfe29c8-c6af-4a3d-9c24-f87b30bf831c"),
                            Description = "SmallBusinessCOA",
                            JsonTemplate = "{\"AccountsType\":[{\"Name\":\"Assets\",\"NameArabic\":\"الاساس\",\"IsActive\":true,\"CostCenters\":[{\"Name\":\"Cash in Hand\",\"NameArabic\":\"صندوق\",\"Description\":\"Cash in Hand\",\"IsActive\":true,\"Code\":\"101000\",\"Accounts\":[{\"Name\":\"Cash in Hand\",\"NameArabic\":\"صندوق\",\"Description\":\"Cash in Hand\",\"IsActive\":true,\"Code\":\"10100001\"}]},{\"Name\":\"Cash in Hand - Store\",\"NameArabic\":\"صندوق المستودع\",\"Description\":\"Cash in Hand - Store\",\"IsActive\":true,\"Code\":\"101001\",\"Accounts\":[{\"Name\":\"Accounts receivable\",\"NameArabic\":\"الحسبات المستحقه\",\"Description\":\"Accounts receivable\",\"IsActive\":true,\"Code\":\"10100101\"}]},{\"Name\":\"Inventory\",\"NameArabic\":\"المخزون\",\"Description\":\"Inventory\",\"IsActive\":true,\"Code\":\"111000\",\"Accounts\":[{\"Name\":\"Inventory\",\"NameArabic\":\"المخزون\",\"Description\":\"Inventory\",\"IsActive\":true,\"Code\":\"11100001\"}]},{\"Name\":\"Customer Reciveables\",\"NameArabic\":\"مستحقات العملاء\",\"Description\":\"Customer Reciveables\",\"IsActive\":true,\"Code\":\"120000\",\"Accounts\":[{\"Name\":\"Customer Reciveables\",\"NameArabic\":\"مستحقات العملاء\",\"Description\":\"Customer Reciveables\",\"IsActive\":true,\"Code\":\"1200001\"}]},{\"Name\":\"VAT Paid\",\"NameArabic\":\"مدفوعات القيمه المضافه\",\"Description\":\"VAT Paid\",\"IsActive\":true,\"Code\":\"130000\",\"Accounts\":[{\"Name\":\"VAT Paid on Purchases\",\"NameArabic\":\"\",\"Description\":\"VAT Paid on Purchases\",\"IsActive\":true,\"Code\":\"1300001\"}]},{\"Name\":\"Banks\",\"NameArabic\":\"البنوك\",\"Description\":\"Banks\",\"IsActive\":true,\"Code\":\"105000\",\"Accounts\":[{\"Name\":\"Banks\",\"NameArabic\":\"البنوك\",\"Description\":\"Banks\",\"IsActive\":true,\"Code\":\"10500001\"}]},{\"Name\":\"Accumulated Depreciation\",\"NameArabic\":\"الاستهلاك التراكمي\",\"Description\":\"Accumulated Depreciation\",\"IsActive\":true,\"Code\":\"170000\",\"Accounts\":[{\"Name\":\"Accumulated Depreciation\",\"NameArabic\":\"الاستهلاك التراكمي\",\"Description\":\"Accumulated Depreciation\",\"IsActive\":true,\"Code\":\"17000001\"}]},{\"Name\":\"Fixed Assets\",\"NameArabic\":\"الاساس الثابت\",\"Description\":\"Fixed Assets\",\"IsActive\":true,\"Code\":\"150000\",\"Accounts\":[{\"Name\":\"Fixed Assets\",\"NameArabic\":\"الاساس الثابت\",\"Description\":\"Fixed Assets\",\"IsActive\":true,\"Code\":\"1500001\"}]},{\"Name\":\"Due from Employee\",\"NameArabic\":\"مديونات الموظف\",\"Description\":\"Due from Employee\",\"IsActive\":true,\"Code\":\"126000\",\"Accounts\":[{\"Name\":\"Due from Employee\",\"NameArabic\":\"مديونات الموظف\",\"Description\":\"Due from Employee\",\"IsActive\":true,\"Code\":\"12600001\"}]}]},{\"Name\":\"Liabilities\",\"NameArabic\":\"التزامات\",\"IsActive\":true,\"CostCenters\":[{\"Name\":\"Supplier Payable\",\"NameArabic\":\"مدفوعات الموردين\",\"Description\":\"Supplier Payable\",\"IsActive\":true,\"Code\":\"200000\",\"Accounts\":[{\"Name\":\"Supplier Payable\",\"NameArabic\":\"مدفوعات الموردين\",\"Description\":\"Supplier Payable\",\"IsActive\":true,\"Code\":\"20000001\"}]},{\"Name\":\"Payroll Liabilities\",\"NameArabic\":\"مدفوعات الرواتب\",\"Description\":\"Payroll Liabilities\",\"IsActive\":true,\"Code\":\"240000\",\"Accounts\":[{\"Name\":\"Payroll Liabilities\",\"NameArabic\":\"مدفوعات الرواتب\",\"Description\":\"Payroll Liabilities\",\"IsActive\":true,\"Code\":\"24000001\"}]},{\"Name\":\"VAT Payable\",\"NameArabic\":\"مدفوعات الضريبه\",\"Description\":\"VAT Payable\",\"IsActive\":true,\"Code\":\"250000\",\"Accounts\":[{\"Name\":\"VAT Payable on Sale\",\"NameArabic\":\"مدفوعات الضريبه\",\"Description\":\"VAT Payable on Sale\",\"IsActive\":true,\"Code\":\"25000001\"}]},{\"Name\":\"Loan Payable\",\"NameArabic\":\"قرض مستحق الدفع\",\"Description\":\"Loan Payable\",\"IsActive\":true,\"Code\":\"253001\",\"Accounts\":[{\"Name\":\"Loan Payable\",\"NameArabic\":\"قرض مستحق الدفع\",\"Description\":\"Loan Payable\",\"IsActive\":true,\"Code\":\"2530101\"}]}]},{\"Name\":\"Equity\",\"NameArabic\":\"رأس المال\",\"IsActive\":true,\"CostCenters\":[{\"Name\":\"Opening Balance Equity\",\"NameArabic\":\"الرصيد الافتتاحي\",\"Description\":\"Opening Balance Equity\",\"IsActive\":true,\"Code\":\"300000\",\"Accounts\":[{\"Name\":\"Opening Balance Equity\",\"NameArabic\":\"الرصيد الافتتاحي\",\"Description\":\"Opening Balance Equity\",\"IsActive\":true,\"Code\":\"30000001\"}]},{\"Name\":\"Owner Investment\",\"NameArabic\":\"استثمار المالك \",\"Description\":\"Owner Investment\",\"IsActive\":true,\"Code\":\"301001\",\"Accounts\":[{\"Name\":\"Owner Investment\",\"NameArabic\":\"استثمار المالك \",\"Description\":\"Owner Investment\",\"IsActive\":true,\"Code\":\"30100101\"}]},{\"Name\":\"Owner Withdrawals\",\"NameArabic\":\"انسحابات المالك \",\"Description\":\"Owner Withdrawals\",\"IsActive\":true,\"Code\":\"302001\",\"Accounts\":[{\"Name\":\"Owner Withdrawals\",\"NameArabic\":\"انسحابات المالك \",\"Description\":\"Owner Withdrawals\",\"IsActive\":true,\"Code\":\"30200101\"}]},{\"Name\":\"Retained Earnings\",\"NameArabic\":\"الارباح\",\"Description\":\"Retained Earnings\",\"IsActive\":true,\"Code\":\"320000\",\"Accounts\":[{\"Name\":\"Retained Earnings\",\"NameArabic\":\"الارباح\",\"Description\":\"Retained Earnings\",\"IsActive\":true,\"Code\":\"32000001\"}]},{\"Name\":\"Net Profit for the period\",\"NameArabic\":\"صافي الربح للفتره\",\"Description\":\"Net Profit for the period\",\"IsActive\":true,\"Code\":\"321002\",\"Accounts\":[{\"Name\":\"Net Profit for the period\",\"NameArabic\":\"صافي الربح للفتره\",\"Description\":\"Net Profit for the period\",\"IsActive\":true,\"Code\":\"32100201\"}]}]},{\"Name\":\"Income\",\"NameArabic\":\"ايرادات\",\"IsActive\":true,\"CostCenters\":[{\"Name\":\"Sale\",\"NameArabic\":\"مبيعات\",\"Description\":\"Sale\",\"IsActive\":true,\"Code\":\"420000\",\"Accounts\":[{\"Name\":\"Sale\",\"NameArabic\":\"مبيعات\",\"Description\":\"Sale\",\"IsActive\":true,\"Code\":\"42000001\"}]},{\"Name\":\"Teller\",\"NameArabic\":\"الصندوق\",\"Description\":\"Teller\",\"IsActive\":true,\"Code\":\"421000\",\"Accounts\":[{\"Name\":\"Teller\",\"NameArabic\":\"الصندوق\",\"Description\":\"Teller\",\"IsActive\":true,\"Code\":\"42100001\"}]},{\"Name\":\"POS-Terminal\",\"NameArabic\":\"نقاط البيع - بنك\",\"Description\":\"POS-Terminal\",\"IsActive\":true,\"Code\":\"425000\",\"Accounts\":[{\"Name\":\"POS-Terminal\",\"NameArabic\":\"نقاط البيع - بنك\",\"Description\":\"POS-Terminal\",\"IsActive\":true,\"Code\":\"42500001\"}]},{\"Name\":\"Discount Taken\",\"NameArabic\":\"الخصم المأخوذ\",\"Description\":\"Discount Taken\",\"IsActive\":true,\"Code\":\"426000\",\"Accounts\":[{\"Name\":\"Discount Taken\",\"NameArabic\":\"الخصم المأخوذ\",\"Description\":\"Discount Taken\",\"IsActive\":true,\"Code\":\"42600001\"}]}]},{\"Name\":\"Expenses\",\"NameArabic\":\"المصاريف\",\"IsActive\":true,\"CostCenters\":[{\"Name\":\"Cost of Goods Sold\",\"NameArabic\":\"تكلفه البضاعه المباعه\",\"Description\":\"Cost of Goods Sold\",\"IsActive\":true,\"Code\":\"600001\",\"Accounts\":[{\"Name\":\"Cost of Goods Sold\",\"NameArabic\":\"تكلفه البضاعه المباعه\",\"Description\":\"Cost of Goods Sold\",\"IsActive\":true,\"Code\":\"60000101\"}]},{\"Name\":\"Freight Paid\",\"NameArabic\":\"مدفوعات الشحن\",\"Description\":\"Freight Paid\",\"IsActive\":true,\"Code\":\"608001\",\"Accounts\":[{\"Name\":\"Freight Paid\",\"NameArabic\":\"مدفوعات الشحن\",\"Description\":\"Freight Paid\",\"IsActive\":true,\"Code\":\"60800101\"}]},{\"Name\":\"Discount Given\",\"NameArabic\":\"الخصم المقدم\",\"Description\":\"Discount Given\",\"IsActive\":true,\"Code\":\"607001\",\"Accounts\":[{\"Name\":\"Discount Given\",\"NameArabic\":\"الخصم المقدم\",\"Description\":\"Discount Given\",\"IsActive\":true,\"Code\":\"60700101\"}]},{\"Name\":\"Depreciation Expense\",\"NameArabic\":\"مصاريف الاستقدام\",\"Description\":\"Depreciation Expense\",\"IsActive\":true,\"Code\":\"606001\",\"Accounts\":[{\"Name\":\"Depreciation Expense\",\"NameArabic\":\"مصاريف الاستقدام\",\"Description\":\"Depreciation Expense\",\"IsActive\":true,\"Code\":\"60600101\"}]},{\"Name\":\"General Expenses\",\"NameArabic\":\"المصاريف العامة\",\"Description\":\"General Expenses\",\"IsActive\":true,\"Code\":\"605050\",\"Accounts\":[{\"Name\":\"General Expenses\",\"NameArabic\":\"المصاريف العامة\",\"Description\":\"General Expenses\",\"IsActive\":true,\"Code\":\"60505001\"}]},{\"Name\":\"Payroll\",\"NameArabic\":\"الرواتب\",\"Description\":\"Payroll\",\"IsActive\":true,\"Code\":\"603001\",\"Accounts\":[{\"Name\":\"Payroll\",\"NameArabic\":\"الرواتب\",\"Description\":\"Payroll\",\"IsActive\":true,\"Code\":\"60300101\"}]},{\"Name\":\"Utilities\",\"NameArabic\":\"الخدمات\",\"Description\":\"Utilities\",\"IsActive\":true,\"Code\":\"604001\",\"Accounts\":[{\"Name\":\"Utilities\",\"NameArabic\":\"الخدمات\",\"Description\":\"Utilities\",\"IsActive\":true,\"Code\":\"60400101\"}]},{\"Name\":\"Rent\",\"NameArabic\":\"ايجارات\",\"Description\":\"Rent\",\"IsActive\":true,\"Code\":\"604050\",\"Accounts\":[{\"Name\":\"Rent\",\"NameArabic\":\"ايجارات\",\"Description\":\"Rent\",\"IsActive\":true,\"Code\":\"60405001\"}]},{\"Name\":\"Legal Expenses\",\"NameArabic\":\"المصاريف القانونيه\",\"Description\":\"Legal Expenses\",\"IsActive\":true,\"Code\":\"605001\",\"Accounts\":[{\"Name\":\"Legal Expenses\",\"NameArabic\":\"المصاريف القانونيه\",\"Description\":\"Legal Expenses\",\"IsActive\":true,\"Code\":\"60500101\"}]}]}]}",
                            Name = "SmallBusinessCOA",
                            Type = "Business"
                        });
                });

            modelBuilder.Entity("Focus.Domain.Entities.AccountType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("NameArabic")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("AccountTypes");
                });

            modelBuilder.Entity("Focus.Domain.Entities.Allowance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AllowanceTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("AmountType")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int>("TaxPlan")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AllowanceTypeId");

                    b.HasIndex("CompanyId");

                    b.ToTable("Allowances");
                });

            modelBuilder.Entity("Focus.Domain.Entities.AllowanceType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameArabic")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("AllowanceTypes");
                });

            modelBuilder.Entity("Focus.Domain.Entities.ApplicationUpdate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CounterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Detail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Version")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("ApplicationUpdates");
                });

            modelBuilder.Entity("Focus.Domain.Entities.ApprovalSystem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ApprovaType")
                        .HasColumnType("int");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DesignationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("ApprovalSystems");
                });

            modelBuilder.Entity("Focus.Domain.Entities.ApprovalSystemEmployees", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApprovalSystemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.HasKey("Id");

                    b.HasIndex("ApprovalSystemId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("ApprovalSystemEmployees");
                });

            modelBuilder.Entity("Focus.Domain.Entities.Attachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid?>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ModuleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameArabic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("Focus.Domain.Entities.AutoPurchaseSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("TaxMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TaxRateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("WareHouseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("AutoPurchaseSettings");
                });

            modelBuilder.Entity("Focus.Domain.Entities.AutoPurchaseTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Raw")
                        .HasColumnType("bit");

                    b.Property<string>("RegistrationNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TaxMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TaxRateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WareHouseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("SupplierId");

                    b.ToTable("AutoPurchaseTemplates");
                });

            modelBuilder.Entity("Focus.Domain.Entities.AutoPurchaseTemplateItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AutoPurchaseTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("FixDiscount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("HighQty")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("TaxRateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("UnitPerPack")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("AutoPurchaseTemplateId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ProductId");

                    b.HasIndex("TaxRateId");

                    b.ToTable("AutoPurchaseTemplateItems");
                });

            modelBuilder.Entity("Focus.Domain.Entities.Bank", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccounType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccoutName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccoutNameArabic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("BankName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BranchAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BranchCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BranchName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContactName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPerson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<Guid?>("CurrencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IBNNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IsActive")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ManagerContectualNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ManagerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("NameArabic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SwiftCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CurrencyId");

                    b.ToTable("Banks");
                });

            modelBuilder.Entity("Focus.Domain.Entities.BankPosTerminal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BankId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("TerminalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.HasIndex("CompanyId");

                    b.ToTable("BankPosTerminals");
                });

            modelBuilder.Entity("Focus.Domain.Entities.BatchCosting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ApprovalStatus")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RecipeNoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("RecipeNoId");

                    b.ToTable("BatchCostings");
                });

            modelBuilder.Entity("Focus.Domain.Entities.BatchCostingItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BatchCostingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("UnitPrice")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BatchCostingId");

                    b.HasIndex("CompanyId");

                    b.ToTable("BatchCostingItems");
                });

            modelBuilder.Entity("Focus.Domain.Entities.BatchProcess", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ActualEndDay")
                        .HasColumnType("datetime2");

                    b.Property<int>("ApprovalStatus")
                        .HasColumnType("int");

                    b.Property<string>("ArabicName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnglishName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExpectedEndDay")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<Guid?>("ProcessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProductionBatchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("WarehouseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ProcessId");

                    b.HasIndex("ProductionBatchId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("BatchProcesses");
                });

            modelBuilder.Entity("Focus.Domain.Entities.BatchProcessContractor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ApprovalStatus")
                        .HasColumnType("int");

                    b.Property<Guid?>("BatchProcessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Completions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ContractorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ContractorId2")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ContractorId3")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContractorType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<DateTime?>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<Guid?>("ProductionBatchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ToDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BatchProcessId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ContractorId");

                    b.HasIndex("ContractorId3");

                    b.ToTable("BatchProcessContractors");
                });

            modelBuilder.Entity("Focus.Domain.Entities.BillAttachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameArabic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PurchaseBillId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("PurchaseBillId");

                    b.ToTable("BillAttachments");
                });

            modelBuilder.Entity("Focus.Domain.Entities.Bom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApprovalStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<Guid?>("SaleOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("WareHouseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Boms");
                });

            modelBuilder.Entity("Focus.Domain.Entities.BomRawProducts", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BomSaleOrderItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<decimal>("CurrentQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,4)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("SaleOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BomSaleOrderItemId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ProductId");

                    b.ToTable("BomRawProducts");
                });

            modelBuilder.Entity("Focus.Domain.Entities.BomSaleOrderItems", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("SaleOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BomId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ProductId");

                    b.ToTable("BomSaleOrderItems");
                });

            modelBuilder.Entity("Focus.Domain.Entities.Branch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BranchName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BranchType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsApproval")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCentralized")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOnline")
                        .HasColumnType("bit");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("MainBranch")
                        .HasColumnType("bit");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Branches");
                });

            modelBuilder.Entity("Focus.Domain.Entities.BranchItems", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ProductId");

                    b.ToTable("BranchItems");
                });

            modelBuilder.Entity("Focus.Domain.Entities.BranchSetup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EndNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Prefix")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StartingNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BranchSetups");
                });

            modelBuilder.Entity("Focus.Domain.Entities.BranchUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("CompanyId");

                    b.ToTable("BranchUsers");
                });

            modelBuilder.Entity("Focus.Domain.Entities.BranchVoucher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ApprovalStatus")
                        .HasColumnType("int");

                    b.Property<Guid>("BankCashAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ChequeNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ContactAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Narration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NatureOfPayment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<int>("PaymentMode")
                        .HasColumnType("int");

                    b.Property<string>("TaxMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TaxRateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("VoucherNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BankCashAccountId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ContactAccountId");

                    b.HasIndex("TaxRateId");

                    b.ToTable("BranchVouchers");
                });

            modelBuilder.Entity("Focus.Domain.Entities.BranchWisePermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<Guid>("NobleGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("NobleModuleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PermissionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("BranchWisePermissions");
                });

            modelBuilder.Entity("Focus.Domain.Entities.Brand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameArabic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("Focus.Domain.Entities.BundleCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Buy")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<DateTime?>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Get")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("NameArabic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Offer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("QuantityLimit")
                        .HasColumnType("int");

                    b.Property<decimal>("QuantityOut")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("StockLimit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("ToDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ProductId");

                    b.ToTable("BundleCategories");
                });

            modelBuilder.Entity("Focus.Domain.Entities.BundleOfferBranches", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BundleCategoriesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<Guid?>("PromotionOfferId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BundleCategoriesId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("PromotionOfferId");

                    b.ToTable("BundleOfferBranches");
                });

            modelBuilder.Entity("Focus.Domain.Entities.CashCustomer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Mobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameArabic")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("CashCustomer");
                });

            modelBuilder.Entity("Focus.Domain.Entities.CashRequestUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("CashRequestUsers");
                });

            modelBuilder.Entity("Focus.Domain.Entities.CashVoucher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<Guid?>("SaleInvoiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SaleReturnId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("VoucherNo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("CashVouchers");
                });

            modelBuilder.Entity("Focus.Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("COGSAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid?>("IncomeAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("InventoryAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsReturn")
                        .HasColumnType("bit");

                    b.Property<bool>("IsService")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NameArabic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PurchaseAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ReturnDays")
                        .HasColumnType("int");

                    b.Property<Guid?>("SaleAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("COGSAccountId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("IncomeAccountId");

                    b.HasIndex("InventoryAccountId");

                    b.HasIndex("PurchaseAccountId");

                    b.HasIndex("SaleAccountId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Focus.Domain.Entities.ChequeBook", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BankId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BankNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BookNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBlock")
                        .HasColumnType("bit");

                    b.Property<string>("LastNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int>("NoOfCheques")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Remaining")
                        .HasColumnType("int");

                    b.Property<string>("StartingNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Used")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.HasIndex("CompanyId");

                    b.ToTable("ChequeBooks");
                });

            modelBuilder.Entity("Focus.Domain.Entities.ChequeBookItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AlertDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("BankId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BankNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BookNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CashType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CashTypeDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ChequeBookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ChequeDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChequeNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ChequeType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ChequeTypeDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBlock")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCashed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<Guid?>("IssuedTo")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IssuedToName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("IssuerAccount")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ReservedAccount")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SerialNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortDetail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StatusDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatusType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StatusTypeDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ValidityDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ChequeBookId");

                    b.HasIndex("CompanyId");

                    b.ToTable("ChequeBookItems");
                });

            modelBuilder.Entity("Focus.Domain.Entities.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameArabic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Focus.Domain.Entities.Color", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameArabic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Colors");
                });

            modelBuilder.Entity("Focus.Domain.Entities.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AddressArabic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressEnglish")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Arabic")
                        .HasColumnType("bit");

                    b.Property<bool>("AutoPurchaseVoucher")
                        .HasColumnType("bit");

                    b.Property<bool>("BankDetail")
                        .HasColumnType("bit");

                    b.Property<bool>("Blocked")
                        .HasColumnType("bit");

                    b.Property<Guid?>("BusinessParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("CashVoucher")
                        .HasColumnType("bit");

                    b.Property<string>("CategoryInArabic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CategoryInEnglish")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CityArabic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CityEnglish")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ClientParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyNameArabic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyNameEnglish")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyRegNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryArabic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryEnglish")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("DayStart")
                        .HasColumnType("bit");

                    b.Property<bool>("English")
                        .HasColumnType("bit");

                    b.Property<bool>("ExpenseAccount")
                        .HasColumnType("bit");

                    b.Property<bool>("ExpenseToGst")
                        .HasColumnType("bit");

                    b.Property<string>("HouseNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("InternationalPurchase")
                        .HasColumnType("bit");

                    b.Property<bool>("InvoiceWoInventory")
                        .HasColumnType("bit");

                    b.Property<bool>("IsArea")
                        .HasColumnType("bit");

                    b.Property<bool>("IsForMedical")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMultiUnit")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOpenDay")
                        .HasColumnType("bit");

                    b.Property<bool>("IsProceed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsProduction")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTransferAllow")
                        .HasColumnType("bit");

                    b.Property<string>("Landline")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogoPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("MasterProduct")
                        .HasColumnType("bit");

                    b.Property<string>("NameArabic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEnglish")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("PartiallyPurchase")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Postcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PurchaseOrder")
                        .HasColumnType("bit");

                    b.Property<string>("SaleOrder")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SimpleInvoice")
                        .HasColumnType("bit");

                    b.Property<string>("SimplifyTaxInvoiceLabel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SimplifyTaxInvoiceLabelAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SoInventoryReserve")
                        .HasColumnType("bit");

                    b.Property<bool>("Step1")
                        .HasColumnType("bit");

                    b.Property<bool>("Step2")
                        .HasColumnType("bit");

                    b.Property<bool>("Step3")
                        .HasColumnType("bit");

                    b.Property<bool>("Step4")
                        .HasColumnType("bit");

                    b.Property<bool>("Step5")
                        .HasColumnType("bit");

                    b.Property<bool>("SuperAdminDayStart")
                        .HasColumnType("bit");

                    b.Property<string>("TaxInvoiceLabel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxInvoiceLabelAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Terminal")
                        .HasColumnType("bit");

                    b.Property<bool>("TermsCondition")
                        .HasColumnType("bit");

                    b.Property<string>("Town")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VatRegistrationNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("VersionAllow")
                        .HasColumnType("bit");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5f8d5614-2c7e-4ec0-868c-d254e6516b4d"),
                            Arabic = false,
                            AutoPurchaseVoucher = false,
                            BankDetail = false,
                            Blocked = false,
                            CashVoucher = false,
                            CompanyRegNo = "56ty60",
                            CreatedDate = new DateTime(2024, 5, 9, 19, 27, 59, 321, DateTimeKind.Utc).AddTicks(4573),
                            DayStart = false,
                            English = false,
                            ExpenseAccount = false,
                            ExpenseToGst = false,
                            InternationalPurchase = false,
                            InvoiceWoInventory = false,
                            IsArea = false,
                            IsForMedical = false,
                            IsMultiUnit = false,
                            IsOpenDay = false,
                            IsProceed = false,
                            IsProduction = false,
                            IsTransferAllow = false,
                            MasterProduct = false,
                            NameEnglish = "noble@gmail.com",
                            ParentId = new Guid("00000000-0000-0000-0000-000000000000"),
                            PartiallyPurchase = false,
                            PurchaseOrder = false,
                            SimpleInvoice = false,
                            SoInventoryReserve = false,
                            Step1 = false,
                            Step2 = false,
                            Step3 = false,
                            Step4 = false,
                            Step5 = false,
                            SuperAdminDayStart = false,
                            Terminal = false,
                            TermsCondition = false,
                            VersionAllow = false
                        });
                });

            modelBuilder.Entity("Focus.Domain.Entities.CompanyAccountSetup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AutoSync")
                        .HasColumnType("bit");

                    b.Property<int>("AutoSyncInterval")
                        .HasColumnType("int");

                    b.Property<string>("BackupPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("BankId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BarcodeType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("BundleAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CashId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("CurrencyId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DiscountPayableAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DiscountReceivableAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FreeofCostAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("InventoryAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<Guid?>("PromotionAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SaleAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("StockInAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("StockOutAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TaxMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TaxRateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("VatPayableAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("VatReceiableAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("CompanyAccountSetups");
                });

            modelBuilder.Entity("Focus.Domain.Entities.CompanyAttachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BusinessLicence")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CctvLicence")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CivilDefenceLicense")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommercialRegistration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("CompanyAttachments");
                });

            modelBuilder.Entity("Focus.Domain.Entities.CompanyHolidays", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HolidayType")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<bool>("PaidStatus")
                        .HasColumnType("bit");

                    b.Property<string>("Year")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("CompanyHolidays");
                });

            modelBuilder.Entity("Focus.Domain.Entities.CompanyInformation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AddressArabic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CityArabic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommercialRegNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CountryArabic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameArabic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VatRegistrationNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId")
                        .IsUnique()
                        .HasFilter("[CompanyId] IS NOT NULL");

                    b.ToTable("companyInformations");
                });

            modelBuilder.Entity("Focus.Domain.Entities.CompanyLicence", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ActivationPlatform")
                        .HasColumnType("int");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CompanyType")
                        .HasColumnType("int");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("GracePeriod")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBlock")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTechnicalSupport")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUpdateTechnicalSupport")
                        .HasColumnType("bit");

                    b.Property<string>("LicenseType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("NoOfTransactionsAllow")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("NumberOfUsers")
                        .HasColumnType("int");

                    b.Property<string>("PaymentFrequency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TechnicalSupportPeriod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("CompanyLicences");
                });

            modelBuilder.Entity("Focus.Domain.Entities.CompanyOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Label")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("OptionValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Value")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("CompanyOptions");
                });

            modelBuilder.Entity("Focus.Domain.Entities.CompanyPermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<Guid>("NobleGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("NobleModuleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PermissionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("NobleGroupId");

                    b.HasIndex("NobleModuleId");

                    b.ToTable("CompanyPermissions");
                });

            modelBuilder.Entity("Focus.Domain.Entities.CompanyProcess", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("ProcessName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProcessNameArabic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("CompanyProcess");
                });

            modelBuilder.Entity("Focus.Domain.Entities.CompanySubmissionPeriod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPeriodClosed")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<DateTime>("PeriodEnd")
                        .HasColumnType("datetime2");

                    b.Property<int>("PeriodName")
                        .HasColumnType("int");

                    b.Property<DateTime>("PeriodStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("Year")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("YearlyPeriodId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("YearlyPeriodId");

                    b.ToTable("CompanySubmissionPeriods");
                });

            modelBuilder.Entity("Focus.Domain.Entities.Contact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ActiveDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("AdvanceAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ArabicName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Area")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BillingAttention")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BillingFax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BillingPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BillingZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CaptureDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CashCustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommercialRegistrationNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyNameArabic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyNameEnglish")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNo1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNo2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPerson1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPerson2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("CreditDays")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreditLimit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreditPeriod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CurrencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CustomerCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerGroup")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CustomerGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CustomerType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeliveryAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeliveryOther")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeliveryTerm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnglishName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Facebook")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAddressOnAll")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAllowEmail")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAutoEmail")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCashCustomer")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCustomer")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExpire")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRaw")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("PaymentTerms")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prefix")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PriceLabelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RegionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RegistrationDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShippingAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShippingArea")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShippingAttention")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShippingCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShippingCountry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShippingFax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShippingOther")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShippingPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShippingZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Skype")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("StatusDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("SupplierCashAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("SupplierType")
                        .HasColumnType("int");

                    b.Property<Guid?>("TaxRateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Telephone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Twitter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VatNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WhatsAppNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("AdvanceAccountId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("CustomerGroupId");

                    b.HasIndex("RegionId");

                    b.HasIndex("SupplierCashAccountId");

                    b.HasIndex("TaxRateId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("Focus.Domain.Entities.ContactAttachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CommercialRegistration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ContactId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("VATCertificate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZakatCertificate")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ContactId");

                    b.ToTable("ContactAttachments");
                });

            modelBuilder.Entity("Focus.Domain.Entities.ContactBankAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BranchName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ContactId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Iban")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("NameOfBank")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoutingCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ContactId");

                    b.ToTable("ContactBankAccounts");
                });

            modelBuilder.Entity("Focus.Domain.Entities.ContactPerson", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ContactId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prefix")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.ToTable("ContactPersons");
                });

            modelBuilder.Entity("Focus.Domain.Entities.Contractor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ArabicName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("EnglishName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOnFactory")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Contractors");
                });

            modelBuilder.Entity("Focus.Domain.Entities.ContractorItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BasicUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("BatchProcessContractorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("HighQuantity")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LevelOneUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("UnitPerPack")
                        .HasColumnType("int");

                    b.Property<Guid?>("WarehouseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Waste")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("BatchProcessContractorId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ProductId");

                    b.ToTable("ContractorItems");
                });

            modelBuilder.Entity("Focus.Domain.Entities.ContractorPayment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("BatchProcessContractorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ChequeNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Narration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<int>("PaymentMode")
                        .HasColumnType("int");

                    b.Property<Guid?>("PaymentVoucherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("VoucherNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BatchProcessContractorId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("PaymentVoucherId");

                    b.ToTable("ContractorPayments");
                });

            modelBuilder.Entity("Focus.Domain.Entities.Contribution", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("AmountType")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("NameInPayslip")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameInPayslipArabic")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Contributions");
                });

            modelBuilder.Entity("Focus.Domain.Entities.CostCenter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NameArabic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("VatDeductible")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AccountTypeId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("Code", "CompanyId")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("Code", "CompanyId"), false);

                    b.ToTable("CostCenters");
                });

            modelBuilder.Entity("Focus.Domain.Entities.CreditNote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ApprovalStatus")
                        .HasColumnType("int");

                    b.Property<Guid?>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ContactId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("GrossAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("InvoiceNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCreditNote")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInventoryTransaction")
                        .HasColumnType("bit");

                    b.Property<bool>("IsItemDescription")
                        .HasColumnType("bit");

                    b.Property<bool>("IsService")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Narration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PeriodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PurchasePostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SaleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TaxMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TaxRateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TerminalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("VatAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("WareHouseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Year")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ContactId");

                    b.HasIndex("PurchasePostId");

                    b.HasIndex("SaleId");

                    b.ToTable("CreditNotes");
                });

            modelBuilder.Entity("Focus.Domain.Entities.CreditNoteItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<Guid>("CreditNoteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("FixDiscount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsFree")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("ServiceItem")
                        .HasColumnType("bit");

                    b.Property<string>("TaxMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TaxRateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalWithOutAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("VatAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("WareHouseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreditNoteId");

                    b.HasIndex("ProductId");

                    b.HasIndex("TaxRateId");

                    b.HasIndex("WareHouseId");

                    b.ToTable("CreditNoteItems");
                });

            modelBuilder.Entity("Focus.Domain.Entities.Currency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ArabicSign")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameArabic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sign")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("Focus.Domain.Entities.CustomerDiscount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<double>("Discount")
                        .HasColumnType("float");

                    b.Property<string>("DiscountName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("ExtraDiscount")
                        .HasColumnType("float");

                    b.Property<double>("FreightDiscount")
                        .HasColumnType("float");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<double>("OpenDiscount")
                        .HasColumnType("float");

                    b.Property<double>("OtherDiscount")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("CustomerDiscount");
                });

            modelBuilder.Entity("Focus.Domain.Entities.CustomerGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameArabic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("CustomerGroups");
                });

            modelBuilder.Entity("Focus.Domain.Entities.DailyExpense", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ApprovalStatus")
                        .HasColumnType("int");

                    b.Property<Guid?>("BillerAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CounterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DayId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExpenseDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("GrossAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDraft")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExpenseAccount")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("OperationBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("OperationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OperationPerson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaymentMode")
                        .HasColumnType("int");

                    b.Property<string>("PaymetType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PeriodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReferenceNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalVat")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("VoucherNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Year")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("BillerAccountId");

                    b.HasIndex("CompanyId");

                    b.ToTable("DailyExpenses");
                });

            modelBuilder.Entity("Focus.Domain.Entities.DailyExpenseAttachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DailyExpenseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameArabic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("DailyExpenseId");

                    b.ToTable("DailyExpenseAttachments");
                });

            modelBuilder.Entity("Focus.Domain.Entities.DailyExpenseDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DailyExpenseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ExpenseAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("TaxMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("VatId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("DailyExpenseId");

                    b.HasIndex("ExpenseAccountId");

                    b.HasIndex("VatId");

                    b.ToTable("DailyExpenseDetails");
                });

            modelBuilder.Entity("Focus.Domain.Entities.DayStart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("BankAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CarryCash")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CashInHand")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CounterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("CreditReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("DayEndUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DayStartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DayStartUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DuringSaleClose")
                        .HasColumnType("int");

                    b.Property<string>("DuringSaleCloseReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EndTerminalBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EndTerminalFor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ExpenseCash")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("FromTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDayStart")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExpenseDay")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReceived")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int>("NoOfTransaction")
                        .HasColumnType("int");

                    b.Property<decimal>("OpeningCash")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ReceivingAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("SaleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StartTerminalBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StartTerminalFor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SuperVisorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("SupervisorCash")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("ToTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalCash")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("VerifyCash")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("DayStarts");
                });

            modelBuilder.Entity("Focus.Domain.Entities.Deduction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("AmountType")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("NameInPayslip")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameInPayslipArabic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TaxPlan")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Deductions");
                });

            modelBuilder.Entity("Focus.Domain.Entities.DefaultSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsCashCustomer")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCustomeCredit")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCustomerPayCredit")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPurchaseCredit")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSaleCredit")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSupplierCredit")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSupplierPayCredit")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DefaultSettings");
                });

            modelBuilder.Entity("Focus.Domain.Entities.DeliveryAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("AllDaySelection")
                        .HasColumnType("bit");

                    b.Property<bool>("AllHour")
                        .HasColumnType("bit");

                    b.Property<string>("Area")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BillingFax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BillingZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ContactId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContactName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FromTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("GoogleLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOffice")
                        .HasColumnType("bit");

                    b.Property<string>("Langitutue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Latitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NearBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ToTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.ToTable("DeliveryAddresses");
                });

            modelBuilder.Entity("Focus.Domain.Entities.DeliveryChallan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ApprovalStatus")
                        .HasColumnType("int");

                    b.Property<bool>("BilingAddress")
                        .HasColumnType("bit");

                    b.Property<Guid?>("BillingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("CustomerAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeliveryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsClose")
                        .HasColumnType("bit");

                    b.Property<bool>("IsProcessed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsService")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<Guid?>("NationalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PartiallyInvoices")
                        .HasColumnType("int");

                    b.Property<Guid?>("PeriodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistrationNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SaleInvoiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SaleOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ShippingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TemplateName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Year")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SaleInvoiceId");

                    b.HasIndex("SaleOrderId");

                    b.ToTable("DeliveryChallans");
                });

            modelBuilder.Entity("Focus.Domain.Entities.DeliveryChallanItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DeliveryChallanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("ServiceProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UnitName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("DeliveryChallanId");

                    b.HasIndex("ProductId");

                    b.ToTable("DeliveryChallanItems");
                });

            modelBuilder.Entity("Focus.Domain.Entities.DeliveryChallanReserved", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ApprovalStatus")
                        .HasColumnType("int");

                    b.Property<bool>("BilingAddress")
                        .HasColumnType("bit");

                    b.Property<Guid?>("BillingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("CustomerAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeliveryChallanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DeliveryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsClose")
                        .HasColumnType("bit");

                    b.Property<bool>("IsService")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<Guid?>("NationalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RegistrationNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SaleInvoiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SaleOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ShippingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TemplateName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("SaleInvoiceId");

                    b.ToTable("DeliveryChallanReserveds");
                });

            modelBuilder.Entity("Focus.Domain.Entities.DeliveryChallanReserverdItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DeliveryChallanReservedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("ServiceProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UnitName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryChallanReservedId");

                    b.HasIndex("ProductId");

                    b.ToTable("DeliveryChallanReserverdItems");
                });

            modelBuilder.Entity("Focus.Domain.Entities.DeliveryHoliday", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DeliveryAddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("WeekHolidayId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryAddressId");

                    b.HasIndex("WeekHolidayId");

                    b.ToTable("DeliveryHolidays");
                });

            modelBuilder.Entity("Focus.Domain.Entities.DenominationSetup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<decimal>("Number")
                        .HasColumnType("decimal(18,4)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("DenominationSetups");
                });

            modelBuilder.Entity("Focus.Domain.Entities.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BankId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NameArabic")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.HasIndex("CompanyId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Focus.Domain.Entities.Designation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NameArabic")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Designations");
                });

            modelBuilder.Entity("Focus.Domain.Entities.Discount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("DiscountName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("DiscountPercent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("Focus.Domain.Entities.DiscountSetup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("DiscountOver1Qty")
                        .HasColumnType("bit");

                    b.Property<bool>("DiscountOverQty")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("LineItemAfterVat")
                        .HasColumnType("bit");

                    b.Property<bool>("LineItemBeforeVat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("OverAllAfterVat")
                        .HasColumnType("bit");

                    b.Property<bool>("OverAllBeforeVat")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("DiscountSetups");
                });

            modelBuilder.Entity("Focus.Domain.Entities.DispatchNote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ApprovalStatus")
                        .HasColumnType("int");

                    b.Property<Guid?>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsClose")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PeriodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Refrence")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistrationNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SaleOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Year")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SaleOrderId");

                    b.ToTable("DispatchNotes");
                });

            modelBuilder.Entity("Focus.Domain.Entities.DispatchNoteItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DispatchNoteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("DispatchNoteId");

                    b.HasIndex("ProductId");

                    b.ToTable("DispatchNoteItems");
                });

            modelBuilder.Entity("Focus.Domain.Entities.EmailConfiguration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Port")
                        .HasColumnType("int");

                    b.Property<string>("Server")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SmtpServer")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("EmailConfiguration");
                });

            modelBuilder.Entity("Focus.Domain.Entities.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<Guid?>("DesignationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Nic")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<string>("SearchingKey")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<Guid?>("ZoneId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("DesignationId");

                    b.HasIndex("ParentId");

                    b.HasIndex("ZoneId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Focus.Domain.Entities.EmployeeAttachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AttachmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeAttachments");
                });

            modelBuilder.Entity("Focus.Domain.Entities.EmployeeDepartment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeDepartments");
                });

            modelBuilder.Entity("Focus.Domain.Entities.EmployeeRegistration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArabicName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BloodGroup")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BranchName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Days")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DesignationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DrivingExpiryDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DrivingIssuingAuthority")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DrivingLicenseNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DrivingLicenseType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeAccess")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("EmployeeAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("EmployeeType")
                        .HasColumnType("int");

                    b.Property<string>("EnglishName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExpiryDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FatherName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomeCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomeContactNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomeCountry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomePersonName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomeReferenceEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomeRelation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IDNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IDType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IbanNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal>("Limit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("MartialStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("MedicalPolicExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MedicalPolicNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalPolicProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalPolicType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("NationalOrForeign")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nationality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherContact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PassportExpiryDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PassportIssueDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PassportIssuingAuthority")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PassportNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PayableAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("PerDayWorkHour")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PrimaryContactNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryNameOfPerson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryReferenceEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryRelation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SalaryType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondaryContactNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondaryNameOfPerson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondaryReferenceEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondaryRelation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpouseName1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpouseName2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpouseName3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpouseName4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TemporaryCashIssuer")
                        .HasColumnType("bit");

                    b.Property<bool>("TemporaryCashReceiver")
                        .HasColumnType("bit");

                    b.Property<bool>("TemporaryCashRequester")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DesignationId");

                    b.HasIndex("EmployeeAccountId");

                    b.HasIndex("PayableAccountId");

                    b.ToTable("EmployeeRegistrations");
                });

            modelBuilder.Entity("Focus.Domain.Entities.EmployeeRegistrationAttachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CNIC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("DrivingLicense")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Passport")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeRegistrationAttachments");
                });

            modelBuilder.Entity("Focus.Domain.Entities.EmployeeSalary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AutoIncomeTax")
                        .HasColumnType("bit");

                    b.Property<decimal>("BaseSalary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("GosiRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IncomeTax")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<Guid?>("PayPeriodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SalaryTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SalaryType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartingDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("WeekdayHourlySalary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("WeekendDayHourlySalary")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeSalaries");
                });

            modelBuilder.Entity("Focus.Domain.Entities.EmployeeSalaryDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("AmountType")
                        .HasColumnType("int");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<Guid>("EmployeeSalaryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<decimal>("Percent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("TaxPlan")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("EmployeeSalaryId");

                    b.ToTable("EmployeeSalaryDetails");
                });

            modelBuilder.Entity("Focus.Domain.Entities.ExpenseType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExpenseTypeArabic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExpenseTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CompanyId");

                    b.ToTable("ExpenseTypes");
                });

            modelBuilder.Entity("Focus.Domain.Entities.FinancialYearClosing", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("PeriodName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReOpen")
                        .HasColumnType("int");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("FinancialYearClosings");
                });

            modelBuilder.Entity("Focus.Domain.Entities.FinancialYearClosingBalance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<decimal>("Credit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Debit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("FinancialYearClosingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsSoftDelete")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int>("ReOpen")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("FinancialYearClosingId");

                    b.ToTable("FinancialYearClosingBalances");
                });

            modelBuilder.Entity("Focus.Domain.Entities.FinancialYearSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClosingType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<bool>("IsAutoClosing")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("FinancialYearSettings");
                });

            modelBuilder.Entity("Focus.Domain.Entities.GatePass", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ApprovalStatus")
                        .HasColumnType("int");

                    b.Property<Guid?>("BatchProcessContractorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContractorType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsClose")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGatePass")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PeriodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProductionBatchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Refrence")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistrationNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ToDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Year")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BatchProcessContractorId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ProductionBatchId");

                    b.ToTable("GatePasses");
                });

            modelBuilder.Entity("Focus.Domain.Entities.GatePassItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GatePassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("HighQuantity")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("WareHouseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("GatePassId");

                    b.HasIndex("ProductId");

                    b.ToTable("GatePassItems");
                });

            modelBuilder.Entity("Focus.Domain.Entities.GoodReceiveNote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ApprovalStatus")
                        .HasColumnType("int");

                    b.Property<string>("ApprovedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("BankCashAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BillingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeliveryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("InvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvoiceNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBeforeTax")
                        .HasColumnType("bit");

                    b.Property<bool>("IsClose")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCredit")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDiscountOnTransaction")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFixed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsProcessed")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<Guid?>("NationalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PartiallyReceived")
                        .HasColumnType("int");

                    b.Property<string>("PaymentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PeriodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("PoDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PoNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PurchaseOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Raw")
                        .HasColumnType("bit");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ReceivedAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistrationNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SaleOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ShippingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SoNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SupplierQuotationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TaxMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TaxRateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TotalAfterDiscount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalWithOutAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TransactionLevelDiscount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("VatAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Year")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("PurchaseOrderId");

                    b.HasIndex("SupplierId");

                    b.ToTable("GoodReceives");
                });

            modelBuilder.Entity("Focus.Domain.Entities.GoodReceiveNoteItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BatchNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("FixDiscount")
                        .HasColumnType("decimal(18,4)");

                    b.Property<Guid>("GoodReceiveNoteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("HighQty")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsService")
                        .HasColumnType("bit");

                    b.Property<decimal>("PoQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ReceiveQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("RemainingQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SerialNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TaxRateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalWithOutAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UnitName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("UnitPerPack")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("VatAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("GoodReceiveNoteId");

                    b.HasIndex("ProductId");

                    b.HasIndex("TaxRateId");

                    b.ToTable("GoodReceiveNoteItems");
                });

            modelBuilder.Entity("Focus.Domain.Entities.GsmSmsSetup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ComPort")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DefaultMessage")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("GsmSmsSetups");
                });

            modelBuilder.Entity("Focus.Domain.Entities.GuestedHoliday", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("HolidayId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("HolidayId");

                    b.ToTable("GuestedHolidays");
                });

            modelBuilder.Entity("Focus.Domain.Entities.HoldSetup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("HoldRecordType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("HoldSetups");
                });

            modelBuilder.Entity("Focus.Domain.Entities.Holiday", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("InTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Month")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameArabic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("OutTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Year")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Holidays");
                });

            modelBuilder.Entity("Focus.Domain.Entities.ImportExportItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CarrierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Etd")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ft")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PortOfDestinationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PortOfLoadingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SaleOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("StuffingLocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Tt")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CarrierId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("PortOfDestinationId");

                    b.HasIndex("PortOfLoadingId");

                    b.HasIndex("SaleOrderId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("StuffingLocationId");

                    b.ToTable("ImportExportItems");
                });

            modelBuilder.Entity("Focus.Domain.Entities.ImportExportType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ImportExportTypes")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameArabic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("ImportExportTypes");
                });

            modelBuilder.Entity("Focus.Domain.Entities.Inquiry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DueDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("HandlerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InquiryNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("InquiryPriorityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("InquiryProcessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("InquiryStatusDynamicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("InquiryTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsTerm")
                        .HasColumnType("bit");

                    b.Property<Guid?>("MediaTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<Guid?>("ReceiverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ReferedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TermAndCondition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserMessage")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("InquiryPriorityId");

                    b.HasIndex("InquiryProcessId");

                    b.HasIndex("InquiryStatusDynamicId");

                    b.HasIndex("InquiryTypeId");

                    b.HasIndex("MediaTypeId");

                    b.HasIndex("ReferedBy");

                    b.ToTable("Inquiries");
                });

            modelBuilder.Entity("Focus.Domain.Entities.InquiryComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("InquiryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ReplyCommentedId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("InquiryId");

                    b.HasIndex("ReplyCommentedId");

                    b.ToTable("InquiryComments");
                });

            modelBuilder.Entity("Focus.Domain.Entities.InquiryEmail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("InquiryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsReceived")
                        .HasColumnType("bit");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("InquiryId");

                    b.ToTable("InquiryEmails");
                });

            modelBuilder.Entity("Focus.Domain.Entities.InquiryEmailCc", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("InquiryEmailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsCc")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("InquiryEmailId");

                    b.ToTable("InquiryEmailCcs");
                });

            modelBuilder.Entity("Focus.Domain.Entities.InquiryItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InquiryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("InquiryId");

                    b.HasIndex("ItemId");

                    b.ToTable("InquiryItems");
                });

            modelBuilder.Entity("Focus.Domain.Entities.InquiryMeeting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Agenda")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("InquiryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("InquiryMeetingStatus")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("InquiryId");

                    b.ToTable("InquiryMeetings");
                });

            modelBuilder.Entity("Focus.Domain.Entities.InquiryMeetingAttendant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MeetingId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("MeetingId");

                    b.ToTable("InquiryMeetingAttendants");
                });

            modelBuilder.Entity("Focus.Domain.Entities.InquiryModule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AttachmentCompulsory")
                        .HasColumnType("bit");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Compulsory")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Label")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RowNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("InquiryModules");
                });

            modelBuilder.Entity("Focus.Domain.Entities.InquiryModuleQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Answer1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Answer2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Answer3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Answer4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Answer5")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Answer6")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Answer7")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Answer8")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Answer9")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("InquiryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InquiryModuleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Question")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("InquiryId");

                    b.HasIndex("InquiryModuleId");

                    b.ToTable("InquiryModuleQuestions");
                });

            modelBuilder.Entity("Focus.Domain.Entities.InquiryPriority", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("InquiryPriorities");
                });

            modelBuilder.Entity("Focus.Domain.Entities.InquiryProcess", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Label")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("InquiryProcesses");
                });

            modelBuilder.Entity("Focus.Domain.Entities.InquiryStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("InquiryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("InquiryStatusDynamicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("InquiryId");

                    b.HasIndex("InquiryStatusDynamicId");

                    b.ToTable("InquiryStatuses");
                });

            modelBuilder.Entity("Focus.Domain.Entities.InquiryStatusDynamic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("InquiryStatusDynamics");
                });

            modelBuilder.Entity("Focus.Domain.Entities.InquiryType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Label")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("InquiryTypes");
                });

            modelBuilder.Entity("Focus.Domain.Entities.Inventory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AutoNumbering")
                        .HasColumnType("int");

                    b.Property<decimal>("AveragePrice")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("BatchNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BundleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Buy")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CounterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<decimal>("CurrentQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CurrentStockValue")
                        .HasColumnType("decimal(18,4)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DayId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DocumentNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Get")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOpen")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<decimal>("OfferQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("PeriodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,4)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PromotionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("RemainingQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("SalePrice")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("Serial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StockId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TransactionType")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WareHouseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("WarrantyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Year")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ProductId");

                    b.HasIndex("StockId");

                    b.ToTable("Inventories");
                });

            modelBuilder.Entity("Focus.Domain.Entities.InventoryBlind", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DocumentId")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("IsCounted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("WarehouseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("InventoryBlinds");
                });

            modelBuilder.Entity("Focus.Domain.Entities.InventoryBlindDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int>("CurrentQuantity")
                        .HasColumnType("int");

                    b.Property<Guid>("InventoryBlindId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int>("PhysicalQuantity")
                        .HasColumnType("int");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("InventoryBlindId");

                    b.HasIndex("ProductId");

                    b.ToTable("InventoryBlindDetails");
                });

            modelBuilder.Entity("Focus.Domain.Entities.InvoiceDefault", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<bool>("IsCustomerPrice")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCustomerPriceLabel")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSalePrice")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSalePriceLabel")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("InvoiceDefaults");
                });

            modelBuilder.Entity("Focus.Domain.Entities.IssuedTo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameArabic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Issueds");
                });

            modelBuilder.Entity("Focus.Domain.Entities.ItemsListDisplayOrderSetup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("ItemsListDisplayOrderSetup");
                });

            modelBuilder.Entity("Focus.Domain.Entities.ItemViewSetup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("ItemViewSetups");
                });

            modelBuilder.Entity("Focus.Domain.Entities.ItemViewSetupForPrint", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("ItemViewSetupForPrint");
                });

            modelBuilder.Entity("Focus.Domain.Entities.JournalVoucher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ApprovalStatus")
                        .HasColumnType("int");

                    b.Property<Guid?>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStockTransfer")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Narration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("OneTimeEntry")
                        .HasColumnType("bit");

                    b.Property<bool>("OpeningCash")
                        .HasColumnType("bit");

                    b.Property<Guid?>("PeriodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("VoucherNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Year")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("JournalVouchers");
                });

            modelBuilder.Entity("Focus.Domain.Entities.JournalVoucherAttachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("JournalVoucherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("JournalVoucherId");

                    b.ToTable("JournalVoucherAttachment");
                });

            modelBuilder.Entity("Focus.Domain.Entities.JournalVoucherItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ChequeNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChequeNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ContactId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Credit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Debit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("JournalVoucherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<int>("PaymentMode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ContactId");

                    b.HasIndex("JournalVoucherId");

                    b.ToTable("JournalVoucherItems");
                });

            modelBuilder.Entity("Focus.Domain.Entities.LeaveGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("LeaveGroups");
                });

            modelBuilder.Entity("Focus.Domain.Entities.LeaveGroupEmployee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LeaveGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("LeaveGroupId");

                    b.ToTable("LeaveGroupEmployees");
                });

            modelBuilder.Entity("Focus.Domain.Entities.LeaveHoliday", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("LeaveHolidays");
                });

            modelBuilder.Entity("Focus.Domain.Entities.LeavePeriod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PeriodEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PeriodStart")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("LeavePeriods");
                });

            modelBuilder.Entity("Focus.Domain.Entities.LeaveRules", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AdminAssignLeave")
                        .HasColumnType("bit");

                    b.Property<bool>("BeyondCurrentLeaveBalance")
                        .HasColumnType("bit");

                    b.Property<int>("CFLeaveAvailabilityPeriod1")
                        .HasColumnType("int");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DesignationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("EmployeesApplyForLeaveType")
                        .HasColumnType("bit");

                    b.Property<bool>("LeaveAccrueEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("LeaveCarriedForward1")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LeaveGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LeavePeriodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LeaveTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LeavesPerLeavePeriod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MaximumCFAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<decimal>("PercentageLeaveCF")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("ProportionateLeaves")
                        .HasColumnType("bit");

                    b.Property<decimal>("RequiredExperience")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DesignationId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("LeaveGroupId");

                    b.HasIndex("LeavePeriodId");

                    b.HasIndex("LeaveTypeId");

                    b.ToTable("LeaveRules");
                });

            modelBuilder.Entity("Focus.Domain.Entities.LeaveTypes", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AdminAssignLeave")
                        .HasColumnType("bit");

                    b.Property<bool>("BeyondCurrentLeaveBalance")
                        .HasColumnType("bit");

                    b.Property<int>("CFLeaveAvailabilityPeriod1")
                        .HasColumnType("int");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<bool>("EmployeeLeavePeriod")
                        .HasColumnType("bit");

                    b.Property<bool>("EmployeesApplyForLeaveType")
                        .HasColumnType("bit");

                    b.Property<bool>("LeaveAccrueEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("LeaveCarriedForward1")
                        .HasColumnType("bit");

                    b.Property<string>("LeaveColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("LeaveGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LeaveName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("LeavesPerLeavePeriod")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MaximumCFAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<decimal>("PercentageLeaveCF")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("ProportionateLeaves")
                        .HasColumnType("bit");

                    b.Property<bool>("SendNotificationEmails")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("LeaveGroupId");

                    b.ToTable("LeaveTypes");
                });

            modelBuilder.Entity("Focus.Domain.Entities.LedgerAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccountLeaderType")
                        .HasColumnType("int");

                    b.Property<Guid>("AccountLedgerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLeave")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLock")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameArabic")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CompanyId");

                    b.ToTable("LedgerAccounts");
                });

            modelBuilder.Entity("Focus.Domain.Entities.LedgerTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ContactId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<decimal>("Credit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Debit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DocumentDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DocumentNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<Guid?>("PeriodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TransactionType")
                        .HasColumnType("int");

                    b.Property<string>("Year")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("LedgerTransactions");
                });

            modelBuilder.Entity("Focus.Domain.Entities.ListOrderSetup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("ListOrderSetups");
                });

            modelBuilder.Entity("Focus.Domain.Entities.LoanPay", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LoanPaymentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("RemainingLoan")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("LoanPaymentId");

                    b.ToTable("LoanPays");
                });

            modelBuilder.Entity("Focus.Domain.Entities.LoanPayment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<decimal>("DeductionValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EmployeeRegistrationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("EmployeeSalary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("InstallmentBaseSalary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("InstallmentMethod")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal>("LoanAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("LoanTakenDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LoanType")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<decimal>("Payment")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("PaymentStartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("ProvidentFundType")
                        .HasColumnType("bit");

                    b.Property<decimal>("RecoveryLoanAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("RecoveryMethod")
                        .HasColumnType("int");

                    b.Property<decimal>("RemainingLoan")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("EmployeeRegistrationId");

                    b.ToTable("LoanPayments");
                });

            modelBuilder.Entity("Focus.Domain.Entities.LoginHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LoginDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LogoutDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("OperatingSystem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("LoginHistories");
                });

            modelBuilder.Entity("Focus.Domain.Entities.LoginPermissions", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AllowAll")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("AllowViewAllData")
                        .HasColumnType("bit");

                    b.Property<bool>("ChangePriceDuringSale")
                        .HasColumnType("bit");

                    b.Property<bool>("CloseCounter")
                        .HasColumnType("bit");

                    b.Property<bool>("CloseDay")
                        .HasColumnType("bit");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<bool>("DailyExpenseList")
                        .HasColumnType("bit");

                    b.Property<decimal>("Days")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("GiveDicountDuringSale")
                        .HasColumnType("bit");

                    b.Property<bool>("HoldCounter")
                        .HasColumnType("bit");

                    b.Property<bool>("InvoiceWoInventory")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExpenseAccount")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInquiryHandler")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOverAllAccess")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsSupervisor")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTouchInvoice")
                        .HasColumnType("bit");

                    b.Property<decimal>("Limit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<bool>("PermissionToStartExpenseDay")
                        .HasColumnType("bit");

                    b.Property<bool>("ProcessSaleReturn")
                        .HasColumnType("bit");

                    b.Property<bool>("StartDay")
                        .HasColumnType("bit");

                    b.Property<bool>("TemporaryCashIssuer")
                        .HasColumnType("bit");

                    b.Property<bool>("TemporaryCashReceiver")
                        .HasColumnType("bit");

                    b.Property<bool>("TemporaryCashRequester")
                        .HasColumnType("bit");

                    b.Property<int>("TerminalUserType")
                        .HasColumnType("int");

                    b.Property<string>("TouchScreen")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TransferCounter")
                        .HasColumnType("bit");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ViewCounterDetails")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("LoginPermissions");
                });

            modelBuilder.Entity("Focus.Domain.Entities.Logistic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ArabicName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClearanceAgent")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContactName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnglishName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LicenseNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LogisticsForm")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int>("Ports")
                        .HasColumnType("int");

                    b.Property<string>("ServiceFor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TermsAndCondition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Xcoordinates")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ycoordinates")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClearanceAgent");

                    b.HasIndex("CompanyId");

                    b.ToTable("Logistics");
                });

            modelBuilder.Entity("Focus.Domain.Entities.ManualAttendance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CheckIn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CheckOut")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsAbsent")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCheckIn")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCheckOut")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOnLeave")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSmsSend")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<decimal>("OverTime")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalHour")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("ManualAttendances");
                });

            modelBuilder.Entity("Focus.Domain.Entities.MediaType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("MediaTypes");
                });

            modelBuilder.Entity("Focus.Domain.Entities.MobileOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameArabic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderNo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("MobileOrders");
                });

            modelBuilder.Entity("Focus.Domain.Entities.MobileOrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("MobileOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,4)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("MobileOrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("MobileOrderItems");
                });

            modelBuilder.Entity("Focus.Domain.Entities.ModuleQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Answer1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Answer2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Answer3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Answer4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Answer5")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Answer6")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Answer7")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Answer8")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Answer9")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InquiryModuleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Question")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("InquiryModuleId");

                    b.ToTable("ModuleQuestions");
                });

            modelBuilder.Entity("Focus.Domain.Entities.ModulesName", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameArabic")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ModulesNames");
                });

            modelBuilder.Entity("Focus.Domain.Entities.ModulesRights", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("ModuleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.ToTable("ModulesRights");
                });

            modelBuilder.Entity("Focus.Domain.Entities.MonthlyCost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("GovtFeeForLabour")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<decimal>("MonthlyGovtFees")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MonthlyGovtZakat")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MonthlyRent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MonthlySaleries")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MonthlyUtilityBills")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("MonthlyCosts");
                });

            modelBuilder.Entity("Focus.Domain.Entities.MonthlyCostItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Daily")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MonthlyCostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("MonthlyCosts")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("YearlyCost")
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("Id");

                    b.HasIndex("MonthlyCostId");

                    b.ToTable("MonthlyCostItems");
                });

            modelBuilder.Entity("Focus.Domain.Entities.MultiUp", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("AdvanceAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("CashAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CompleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CradNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("DealerRef")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("EstimateAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("ExpectedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FaultInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCashed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCollected")
                        .HasColumnType("bit");

                    b.Property<bool>("IsComplete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrint")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRepared")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReturn")
                        .HasColumnType("bit");

                    b.Property<Guid?>("JobAssignId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("PaymentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ReceivedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("RegisteredById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RegistrationNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("RemaningPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("MultiUps");
                });

            modelBuilder.Entity("Focus.Domain.Entities.MultiUPSLineItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AcessoryIncludedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("AdvanceAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CashAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("CompleteDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("EstimateAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("ExpectedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCashed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCollected")
                        .HasColumnType("bit");

                    b.Property<bool>("IsComplete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrint")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRepared")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReturn")
                        .HasColumnType("bit");

                    b.Property<Guid?>("JobAssignId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MultiUpId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PaymentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ProblemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ReceivedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SerialNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UpsDescriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("WarrantyCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AcessoryIncludedId");

                    b.HasIndex("MultiUpId");

                    b.HasIndex("ProblemId");

                    b.HasIndex("UpsDescriptionId");

                    b.HasIndex("WarrantyCategoryId");

                    b.ToTable("MultiUPSLineItems");
                });

            modelBuilder.Entity("Focus.Domain.Entities.NobleGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("GroupName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GroupType")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("NobleGroups");
                });

            modelBuilder.Entity("Focus.Domain.Entities.NobleModule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ArabicName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("ModuleName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("NobleModules");
                });

            modelBuilder.Entity("Focus.Domain.Entities.NoblePermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("NobleModuleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("NobleModuleId");

                    b.ToTable("NoblePermissions");
                });

            modelBuilder.Entity("Focus.Domain.Entities.NobleRolePermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("NobleRolePermissions");
                });

            modelBuilder.Entity("Focus.Domain.Entities.NobleRoles", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NameArabic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("NobleRoles");
                });

            modelBuilder.Entity("Focus.Domain.Entities.NobleUserRoles", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("RoleId");

                    b.ToTable("NobleUserRoles");
                });

            modelBuilder.Entity("Focus.Domain.Entities.Origin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameArabic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Origins");
                });

            modelBuilder.Entity("Focus.Domain.Entities.OtherCurrency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CurrencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CurrencyId");

                    b.ToTable("OtherCurrencies");
                });

            modelBuilder.Entity("Focus.Domain.Entities.PaidTimeOff", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LeavePeriodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LeaveType")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("LeavePeriodId");

                    b.HasIndex("LeaveType");

                    b.ToTable("PaidTimeOffs");
                });

            modelBuilder.Entity("Focus.Domain.Entities.PaymentLimit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("PaymentLimits");
                });

            modelBuilder.Entity("Focus.Domain.Entities.PaymentOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameArabic")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("PaymentOptions");
                });

            modelBuilder.Entity("Focus.Domain.Entities.PaymentRefund", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ApprovalStatus")
                        .HasColumnType("int");

                    b.Property<Guid>("BankCashAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ChequeNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ContactAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Narration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NatureOfPayment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<int>("PaymentMode")
                        .HasColumnType("int");

                    b.Property<Guid?>("PaymentVoucherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PeriodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PurchaseInvoice")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SaleInvoice")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TaxMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TaxRateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("VoucherNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Year")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BankCashAccountId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ContactAccountId");

                    b.HasIndex("TaxRateId");

                    b.ToTable("PaymentRefunds");
                });

            modelBuilder.Entity("Focus.Domain.Entities.PaymentVoucher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("ApprovalStatus")
                        .HasColumnType("int");

                    b.Property<string>("ApprovedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("BankCashAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BillsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ChequeNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ContactAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CounterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DayId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DocumentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DraftBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DraftDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("InvoiceAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRefund")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<Guid?>("MultiUpId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Narration")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("NatureOfPayment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<int>("PaymentMode")
                        .HasColumnType("int");

                    b.Property<int>("PaymentVoucherType")
                        .HasColumnType("int");

                    b.Property<Guid?>("PeriodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PettyCash")
                        .HasColumnType("int");

                    b.Property<string>("Prefix")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PurchaseInvoice")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RejectBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RejectDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("RemainingBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("ReparingOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SaleInvoice")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TaxMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TaxRateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TransactionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("VatAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("VoidBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VoidDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("VoucherNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Year")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BankCashAccountId");

                    b.HasIndex("BillsId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ContactAccountId");

                    b.HasIndex("MultiUpId");

                    b.HasIndex("ReparingOrderId");

                    b.HasIndex("TaxRateId");

                    b.HasIndex("VatAccountId");

                    b.ToTable("PaymentVouchers");
                });

            modelBuilder.Entity("Focus.Domain.Entities.PaymentVoucherAttachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameArabic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PaymentVoucherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PurchaseOrderExpenseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("PaymentVoucherId");

                    b.HasIndex("PurchaseOrderExpenseId");

                    b.ToTable("PaymentVoucherAttachments");
                });

            modelBuilder.Entity("Focus.Domain.Entities.PaymentVoucherDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("ChequeNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ContactAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("PaymentVoucherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PurchaseInvoice")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SaleInvoice")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("PaymentVoucherId");

                    b.ToTable("PaymentVoucherDetails");
                });

            modelBuilder.Entity("Focus.Domain.Entities.PaymentVoucherItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("ChequeNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("DueAmount")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("ExtraAmount")
                        .HasColumnType("decimal(18,4)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAging")
                        .HasColumnType("bit");

                    b.Property<int>("PartiallyInvoices")
                        .HasColumnType("int");

                    b.Property<decimal>("PayAmount")
                        .HasColumnType("decimal(18,4)");

                    b.Property<Guid?>("PaymentVoucherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PurchaseInvoiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SaleInvoiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("Id");

                    b.HasIndex("PaymentVoucherId");

                    b.ToTable("PaymentVoucherItems");
                });

            modelBuilder.Entity("Focus.Domain.Entities.PaySchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<bool>("Default")
                        .HasColumnType("bit");

                    b.Property<string>("IfPayDayFallOnHoliday")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsHourlyPay")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PayDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PayPeriod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PayPeriodEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PayPeriodStartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Proceed")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("PaySchedules");
                });

            modelBuilder.Entity("Focus.Domain.Entities.PermanentDeleteHoldSetup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("HoldRecordType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("PermanentDeleteHoldSetups");
                });

            modelBuilder.Entity("Focus.Domain.Entities.Prefixies", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdvancePurchaseReceipt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdvanceSaleReceipt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreditNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerPayReceipt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DebitNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Employee")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GlobalInvoice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PInvoice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("POrder")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PReturn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentVoucher")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PerfomaInvoice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProformaSaleInvoice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PurchaseInvoiceDraft")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReceiptInvoice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SInvoice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SOrdeTracking")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SOrder")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SQutation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SReturn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SaleInvoiceCredit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SaleInvoiceHold")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupplierPayReceipt")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Prefixies");
                });

            modelBuilder.Entity("Focus.Domain.Entities.PriceLabeling", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameArabic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("PriceLabelings");
                });

            modelBuilder.Entity("Focus.Domain.Entities.PriceRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("CostPrice")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCustomer")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("NewPrice")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,4)");

                    b.Property<Guid?>("PriceLabelingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("PurchasePrice")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("SalePrice")
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("PriceLabelingId");

                    b.HasIndex("ProductId");

                    b.ToTable("PriceRecords");
                });

            modelBuilder.Entity("Focus.Domain.Entities.PrintOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Label")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LabelNameArabic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<Guid?>("PrintSettingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Value")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("PrintSettingId");

                    b.ToTable("PrintOptions");
                });

            modelBuilder.Entity("Focus.Domain.Entities.PrintSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ArabicName")
                        .HasColumnType("bit");

                    b.Property<bool>("AutoPaymentVoucher")
                        .HasColumnType("bit");

                    b.Property<Guid?>("Bank1Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Bank2Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BankAccount1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankAccount2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("BankAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BankIcon1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankIcon2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("BlindPrint")
                        .HasColumnType("bit");

                    b.Property<Guid?>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BusinessAddressArabic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BusinessAddressEnglish")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CargoName")
                        .HasColumnType("bit");

                    b.Property<Guid?>("CashAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClosingLineAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClosingLineEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContactNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ContinueWithPage")
                        .HasColumnType("bit");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<bool>("CustomerAddress")
                        .HasColumnType("bit");

                    b.Property<bool>("CustomerNameAr")
                        .HasColumnType("bit");

                    b.Property<bool>("CustomerNameEn")
                        .HasColumnType("bit");

                    b.Property<bool>("CustomerNumber")
                        .HasColumnType("bit");

                    b.Property<bool>("CustomerTelephone")
                        .HasColumnType("bit");

                    b.Property<bool>("CustomerVat")
                        .HasColumnType("bit");

                    b.Property<string>("DiscountTypeOption")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EnglishName")
                        .HasColumnType("bit");

                    b.Property<decimal?>("ExchangeDays")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("FooterImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HeaderImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HeaderImage1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvoicePrint")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsBlindPrint")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeliveryNote")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHeaderFooter")
                        .HasColumnType("bit");

                    b.Property<bool>("IsQuotationPrint")
                        .HasColumnType("bit");

                    b.Property<bool>("ItemDescription")
                        .HasColumnType("bit");

                    b.Property<bool>("ItemPieceSize")
                        .HasColumnType("bit");

                    b.Property<string>("ManagementNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int>("PrintSize")
                        .HasColumnType("int");

                    b.Property<string>("PrintTemplate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrinterName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProposalImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("ReturnDays")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("ShowBankAccount")
                        .HasColumnType("bit");

                    b.Property<bool>("StyleNo")
                        .HasColumnType("bit");

                    b.Property<bool>("SubTotalWithDashes")
                        .HasColumnType("bit");

                    b.Property<string>("TagsImages")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TaxRateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("TermAndConditionLength")
                        .HasColumnType("bit");

                    b.Property<string>("TermsInAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TermsInEng")
                        .HasColumnType("varchar(MAX)");

                    b.Property<string>("WalkInInvoiceType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WarrantyImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WelcomeLineAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WelcomeLineEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("WithSubTotal")
                        .HasColumnType("bit");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("Bank1Id");

                    b.HasIndex("Bank2Id");

                    b.HasIndex("BankAccountId");

                    b.HasIndex("CashAccountId");

                    b.HasIndex("CompanyId");

                    b.ToTable("PrintSettings");
                });

            modelBuilder.Entity("Focus.Domain.Entities.Process", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ArabicName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnglishName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Processes");
                });

            modelBuilder.Entity("Focus.Domain.Entities.ProcessContractor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ContractorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ContractorId2")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProcessId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ContractorId");

                    b.HasIndex("ContractorId2");

                    b.HasIndex("ProcessId");

                    b.ToTable("ProcessContractors");
                });

            modelBuilder.Entity("Focus.Domain.Entities.ProcessItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProcessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProcessId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProcessItems");
                });

            modelBuilder.Entity("Focus.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ArabicName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Assortment")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("BarCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BarCodeDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BarCodeType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BasicUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("BrandId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BundleCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid?>("CogsAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ColorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("CostPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CostSign")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("CostValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayNameForPrint")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnglishName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("Guarantee")
                        .HasColumnType("bit");

                    b.Property<bool>("HighUnitPrice")
                        .HasColumnType("bit");

                    b.Property<string>("HsCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("InventoryAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExpire")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRaw")
                        .HasColumnType("bit");

                    b.Property<string>("Length")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LevelOneUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<Guid?>("OriginId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PartNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ProductGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProductMasterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PromotionOfferId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("PurchasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SKU")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SaleAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("SalePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SalePriceUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SaleReturnDays")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Scheme")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("SchemeQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Serial")
                        .HasColumnType("bit");

                    b.Property<bool>("ServiceItem")
                        .HasColumnType("bit");

                    b.Property<string>("Shelf")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SizeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StockLevel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StyleNumber")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid?>("SubCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TaxMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TaxRateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("UnitPerPack")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("WholesalePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("WholesaleQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Width")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("BundleCategoryId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ColorId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("OriginId");

                    b.HasIndex("ProductGroupId");

                    b.HasIndex("ProductMasterId");

                    b.HasIndex("PromotionOfferId");

                    b.HasIndex("SizeId");

                    b.HasIndex("TaxRateId");

                    b.HasIndex("UnitId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Focus.Domain.Entities.ProductGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameArabic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("ProductGroups");
                });

            modelBuilder.Entity("Focus.Domain.Entities.ProductionBatch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ApprovalStatus")
                        .HasColumnType("int");

                    b.Property<Guid?>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompleteBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CompleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<decimal>("DamageStock")
                        .HasColumnType("decimal(18,4)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("EmployeeRegistrationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsClose")
                        .HasColumnType("bit");

                    b.Property<string>("LateReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LateReasonCompletion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LateReasonTransfer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("NoOfBatches")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProcessBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ProcessDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RecipeNoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("RecipeQuantity")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("RegistrationNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("RemainingStock")
                        .HasColumnType("decimal(18,4)");

                    b.Property<Guid?>("SaleOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("TransferBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TransferDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("EmployeeRegistrationId");

                    b.HasIndex("RecipeNoId");

                    b.HasIndex("SaleOrderId");

                    b.ToTable("ProductionBatchs");
                });

            modelBuilder.Entity("Focus.Domain.Entities.ProductionBatchItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BasicUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CurrentQuantity")
                        .HasColumnType("int");

                    b.Property<int>("HighQuantity")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LevelOneUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductionBatchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("RemainingQuantity")
                        .HasColumnType("int");

                    b.Property<int>("UnitPerPack")
                        .HasColumnType("int");

                    b.Property<Guid?>("WarehouseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Waste")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductionBatchId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("ProductionBatchItems");
                });

            modelBuilder.Entity("Focus.Domain.Entities.ProductionStockTransfer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<decimal>("DamageStock")
                        .HasColumnType("decimal(18,4)");

                    b.Property<Guid>("DamageWareHouse")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductionBatchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("RemainingStock")
                        .HasColumnType("decimal(18,4)");

                    b.Property<Guid>("RemainingWareHouse")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("ProductionStockTransfers");
                });

            modelBuilder.Entity("Focus.Domain.Entities.ProductMaster", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameArabic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("ProductMasters");
                });

            modelBuilder.Entity("Focus.Domain.Entities.ProductSize", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SizeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SizeId");

                    b.ToTable("ProductSizes");
                });

            modelBuilder.Entity("Focus.Domain.Entities.PromotionOffer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("BaseQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Buy")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("DiscountType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Friday")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Get")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("GetProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IncludingBaseQuantity")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<bool>("Monday")
                        .HasColumnType("bit");

                    b.Property<string>("Offer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ProductGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PromotionType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("QuantityOut")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Saturday")
                        .HasColumnType("bit");

                    b.Property<decimal>("StockLimit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Sunday")
                        .HasColumnType("bit");

                    b.Property<bool>("Thursday")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ToDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Tuesday")
                        .HasColumnType("bit");

                    b.Property<decimal>("UpToQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Wednesday")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("GetProductId");

                    b.HasIndex("ProductGroupId");

                    b.HasIndex("ProductId");

                    b.ToTable("PromotionOffers");
                });

            modelBuilder.Entity("Focus.Domain.Entities.PromotionOfferItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("BaseQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Buy")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("DiscountType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Get")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("GetProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IncludingBaseQuantity")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PromotionOfferId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PromotionType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("QuantityOut")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("StockLimit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UpToQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("GetProductId");

                    b.HasIndex("ProductId");

                    b.HasIndex("PromotionOfferId");

                    b.ToTable("PromotionOfferItems");
                });

            modelBuilder.Entity("Focus.Domain.Entities.Purchase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("InvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("InvoiceFixDiscount")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("InvoiceNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPost")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPurchaseReturn")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<Guid?>("PeriodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PurchaseOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PurchaseOrderNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Raw")
                        .HasColumnType("bit");

                    b.Property<string>("RegistrationNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SaleOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TaxMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TaxRateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WareHouseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Year")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("PurchaseOrderId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Purchases");
                });

            modelBuilder.Entity("Focus.Domain.Entities.PurchaseAttachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameArabic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PurchaseOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("PurchaseOrderId");

                    b.ToTable("PurchaseAttachments");
                });

            modelBuilder.Entity("Focus.Domain.Entities.PurchaseBill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ApprovalStatus")
                        .HasColumnType("int");

                    b.Property<DateTime?>("BillDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("BillerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Narration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PartiallyInvoices")
                        .HasColumnType("int");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistrationNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("RemainingAmount")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("TaxMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("Id");

                    b.HasIndex("BillerId");

                    b.HasIndex("CompanyId");

                    b.ToTable("PurchaseBills");
                });

            modelBuilder.Entity("Focus.Domain.Entities.PurchaseBillItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("PurchaseBillId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("PurchaseBillId");

                    b.ToTable("PurchaseBillItems");
                });

            modelBuilder.Entity("Focus.Domain.Entities.PurchaseInvoiceAction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<DateTime>("CurrentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<Guid>("ProcessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PurchaseInvoiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PurchaseInvoicePostId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ProcessId");

                    b.HasIndex("PurchaseInvoiceId");

                    b.HasIndex("PurchaseInvoicePostId");

                    b.ToTable("PurchaseInvoiceActions");
                });

            modelBuilder.Entity("Focus.Domain.Entities.PurchaseInvoiceAttachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PurchaseInvoiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PurchaseInvoicePostId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("PurchaseInvoiceId");

                    b.HasIndex("PurchaseInvoicePostId");

                    b.ToTable("PurchaseInvoiceAttachments");
                });

            modelBuilder.Entity("Focus.Domain.Entities.PurchaseItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AutoNumber")
                        .HasColumnType("int");

                    b.Property<string>("BatchNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("FixDiscount")
                        .HasColumnType("decimal(18,4)");

                    b.Property<DateTime?>("GuaranteeDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("HighQty")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PurchaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("SerialNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TaxRateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("UnitPerPack")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,4)");

                    b.Property<Guid>("WareHouseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ProductId");

                    b.HasIndex("PurchaseId");

                    b.HasIndex("TaxRateId");

                    b.HasIndex("WareHouseId");

                    b.ToTable("PurchaseItems");
                });

            modelBuilder.Entity("Focus.Domain.Entities.PurchaseOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ApprovalStatus")
                        .HasColumnType("int");

                    b.Property<Guid?>("BillingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeliveryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("DocumentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("InvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvoiceNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBeforeTax")
                        .HasColumnType("bit");

                    b.Property<bool>("IsClose")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDiscountOnTransaction")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFixed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsProcessed")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<Guid?>("NationalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PartiallyReceived")
                        .HasColumnType("int");

                    b.Property<Guid?>("PeriodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Raw")
                        .HasColumnType("bit");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistrationNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ShippingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SupplierQuotationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TaxMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TaxRateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TotalAfterDiscount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalWithOutAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TransactionLevelDiscount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("VatAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Year")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("SupplierId");

                    b.ToTable("PurchaseOrders");
                });

            modelBuilder.Entity("Focus.Domain.Entities.PurchaseOrderAction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<DateTime>("CurrentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<Guid>("ProcessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PurchaseOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ProcessId");

                    b.HasIndex("PurchaseOrderId");

                    b.ToTable("PurchaseOrderActions");
                });

            modelBuilder.Entity("Focus.Domain.Entities.PurchaseOrderExpense", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ApprovalStatus")
                        .HasColumnType("int");

                    b.Property<string>("ApprovedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("BankCashAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ChequeNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ContactAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("DraftBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DraftDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ExpenseTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Narration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<int>("PaymentMode")
                        .HasColumnType("int");

                    b.Property<Guid?>("PaymentVoucherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PaymentVoucherType")
                        .HasColumnType("int");

                    b.Property<int>("PettyCash")
                        .HasColumnType("int");

                    b.Property<Guid?>("PurchaseOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RejectBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RejectDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TaxMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TaxRateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("UsedAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("VatAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("VoidBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VoidDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("VoucherNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BankCashAccountId");

                    b.HasIndex("BillId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ContactAccountId");

                    b.HasIndex("ExpenseTypeId");

                    b.HasIndex("PaymentVoucherId");

                    b.HasIndex("PurchaseOrderId");

                    b.HasIndex("TaxRateId");

                    b.HasIndex("VatAccountId");

                    b.ToTable("PurchaseOrderExpenses");
                });

            modelBuilder.Entity("Focus.Domain.Entities.PurchaseOrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BatchNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("FixDiscount")
                        .HasColumnType("decimal(18,4)");

                    b.Property<DateTime?>("GuaranteeDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("HighQty")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsService")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PurchaseOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PurchaseOrderVersionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ReceiveQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("RemainingQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SerialNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TaxRateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalWithOutAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UnitName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("UnitPerPack")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("VatAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("WarrantyTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ProductId");

                    b.HasIndex("PurchaseOrderId");

                    b.HasIndex("PurchaseOrderVersionId");

                    b.HasIndex("TaxRateId");

                    b.ToTable("PurchaseOrderItems");
                });

            modelBuilder.Entity("Focus.Domain.Entities.PurchaseOrderPayment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ChequeNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Narration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<int>("PaymentMode")
                        .HasColumnType("int");

                    b.Property<Guid?>("PaymentVoucherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PurchaseOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("VoucherNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("PaymentVoucherId");

                    b.HasIndex("PurchaseOrderId");

                    b.ToTable("PurchaseOrderPayments");
                });

            modelBuilder.Entity("Focus.Domain.Entities.PurchaseOrderVersion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<Guid?>("PurchaseOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PurchaseOrderVersionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Version")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("PurchaseOrderId");

                    b.ToTable("PurchaseOrderVersions");
                });

            modelBuilder.Entity("Focus.Domain.Entities.PurchasePost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BankCashAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BillingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeliveryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ExpenseUse")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("GoodReceiveNoteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("GoodsRecieveNumberAndDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("InvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("InvoiceFixDiscount")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("InvoiceNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsBeforeTax")
                        .HasColumnType("bit");

                    b.Property<bool>("IsClose")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCost")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCredit")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDiscountOnTransaction")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFixed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPurchasePost")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPurchaseReturn")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<Guid?>("NationalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PartiallyInvoices")
                        .HasColumnType("int");

                    b.Property<string>("PaymentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PeriodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PurchaseInvoiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PurchaseOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PurchaseOrderNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Raw")
                        .HasColumnType("bit");

                    b.Property<decimal>("ReceivedAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistrationNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ShippingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SupplierQuotationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TaxMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TaxRateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TotalAfterDiscount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalWithOutAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TransactionLevelDiscount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("VatAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("WareHouseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Year")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("poNumberAndDate")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("GoodReceiveNoteId");

                    b.HasIndex("PurchaseOrderId");

                    b.HasIndex("SupplierId");

                    b.ToTable("PurchasePosts");
                });

            modelBuilder.Entity("Focus.Domain.Entities.PurchasePostExpense", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ApprovalStatus")
                        .HasColumnType("int");

                    b.Property<string>("ApprovedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("BankCashAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ChequeNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ContactAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CounterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DayId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DraftBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DraftDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExpenseType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Narration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<int>("PaymentMode")
                        .HasColumnType("int");

                    b.Property<Guid?>("PaymentVoucherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PaymentVoucherType")
                        .HasColumnType("int");

                    b.Property<int>("PettyCash")
                        .HasColumnType("int");

                    b.Property<Guid?>("PurchasePostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RejectBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RejectDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TaxMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TaxRateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("VatAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("VatAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("VoidBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VoidDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("VoucherNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BillId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("PaymentVoucherId");

                    b.HasIndex("PurchasePostId");

                    b.HasIndex("TaxRateId");

                    b.ToTable("PurchasePostExpenses");
                });

            modelBuilder.Entity("Focus.Domain.Entities.PurchasePostItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BatchNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ColorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("FixDiscount")
                        .HasColumnType("decimal(18,4)");

                    b.Property<DateTime?>("GuaranteeDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("HighQty")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsService")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PurchasePostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("RemainingQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SerialNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TaxRateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalWithOutAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UnitName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("UnitPerPack")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("VatAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("WareHouseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("WarrantyTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ColorId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ProductId");

                    b.HasIndex("PurchasePostId");

                    b.HasIndex("TaxRateId");

                    b.HasIndex("WareHouseId");

                    b.HasIndex("WarrantyTypeId");

                    b.ToTable("PurchasePostItems");
                });

            modelBuilder.Entity("Focus.Domain.Entities.QuotationTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ApprovalStatus")
                        .HasColumnType("int");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsService")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("RegistrationNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TemplateName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("QuotationTemplates");
                });

            modelBuilder.Entity("Focus.Domain.Entities.QuotationTemplateItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("QuotationTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ProductId");

                    b.HasIndex("QuotationTemplateId");

                    b.ToTable("QuotationTemplateItems");
                });

            modelBuilder.Entity("Focus.Domain.Entities.RecipeAssortment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Assortment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RecipeNoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RecipeNoId");

                    b.ToTable("RecipeAssortments");
                });

            modelBuilder.Entity("Focus.Domain.Entities.RecipeItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BasicUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("HighQuantity")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LevelOneUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("RecipeNoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UnitPerPack")
                        .HasColumnType("int");

                    b.Property<Guid?>("WareHouseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Waste")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ProductId");

                    b.HasIndex("RecipeNoId");

                    b.HasIndex("WareHouseId");

                    b.ToTable("RecipeItems");
                });

            modelBuilder.Entity("Focus.Domain.Entities.RecipeNo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ApprovalStatus")
                        .HasColumnType("int");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsClose")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("RecipeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistrationNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SampleRequestId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SampleRequestId");

                    b.ToTable("RecipeNos");
                });

            modelBuilder.Entity("Focus.Domain.Entities.Region", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Area")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid>("CityId")
                        .HasMaxLength(150)
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CountryId")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("StateId")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CompanyId");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("Focus.Domain.Entities.ReparingItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid?>("ReparingOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Waste")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ReparingOrderId");

                    b.ToTable("ReparingItems");
                });

            modelBuilder.Entity("Focus.Domain.Entities.ReparingOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AcessoryIncludedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("AdvanceAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("CashAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CompleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CradNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("DealerRef")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("EstimateAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("ExpectedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FaultInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCashed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCollected")
                        .HasColumnType("bit");

                    b.Property<bool>("IsComplete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrint")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRepared")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReturn")
                        .HasColumnType("bit");

                    b.Property<Guid?>("JobAssignId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("PaymentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PeriodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProblemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ReceivedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("RegisteredById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RegistrationNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("RemaningPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SerialNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UpsDescriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("WarrantyCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Year")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AcessoryIncludedId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ProblemId");

                    b.HasIndex("UpsDescriptionId");

                    b.HasIndex("WarrantyCategoryId");

                    b.ToTable("ReparingOrders");
                });

            modelBuilder.Entity("Focus.Domain.Entities.ReparingOrderType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameArabic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReparingOrderTypeEnums")
                        .HasColumnType("int");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("ReparingOrderTypes");
                });

            modelBuilder.Entity("Focus.Domain.Entities.RolesPermissions", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Approved")
                        .HasColumnType("bit");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<bool>("Delete")
                        .HasColumnType("bit");

                    b.Property<bool>("Draft")
                        .HasColumnType("bit");

                    b.Property<bool>("Edit")
                        .HasColumnType("bit");

                    b.Property<bool>("List")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("ModuleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameArabic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Print")
                        .HasColumnType("bit");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Save")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolesPermissions");
                });

            modelBuilder.Entity("Focus.Domain.Entities.RunPayroll", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Hourly")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<Guid>("PayrollScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("PayrollScheduleId");

                    b.ToTable("RunPayrolls");
                });

            modelBuilder.Entity("Focus.Domain.Entities.RunPayrollDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("AllowanceAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("AutoIncomeTax")
                        .HasColumnType("bit");

                    b.Property<decimal>("BaseSalary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("ContributionAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<decimal>("DeductionAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("GrossSalary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Hour")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("HourAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IncomeTax")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("LoanAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<decimal>("NetSalary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RunPayrollId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SalaryType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("WeekdayHourlySalary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("WeekendDayHourlySalary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("ZeroSalary")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("RunPayrollId");

                    b.ToTable("RunPayrollDetails");
                });

            modelBuilder.Entity("Focus.Domain.Entities.RunPayrollSalaryDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("AmountType")
                        .HasColumnType("int");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<decimal>("Percent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("RunPayrollDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("TaxPlan")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("RunPayrollDetailId");

                    b.ToTable("RunPayrollSalaryDetails");
                });

            modelBuilder.Entity("Focus.Domain.Entities.SalaryAllowance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AllowanceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("AmountType")
                        .HasColumnType("int");

                    b.Property<Guid?>("SalaryTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TaxPlan")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AllowanceId");

                    b.HasIndex("SalaryTemplateId");

                    b.ToTable("SalaryAllowances");
                });

            modelBuilder.Entity("Focus.Domain.Entities.SalaryContribution", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("AmountType")
                        .HasColumnType("int");

                    b.Property<Guid?>("ContributionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SalaryTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ContributionId");

                    b.HasIndex("SalaryTemplateId");

                    b.ToTable("SalaryContributions");
                });

            modelBuilder.Entity("Focus.Domain.Entities.SalaryDeduction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("AmountType")
                        .HasColumnType("int");

                    b.Property<Guid?>("DeductionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SalaryTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TaxPlan")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DeductionId");

                    b.HasIndex("SalaryTemplateId");

                    b.ToTable("SalaryDeductions");
                });

            modelBuilder.Entity("Focus.Domain.Entities.SalaryTaxSlab", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<decimal>("FixedTax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("IncomeFrom")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("IncomeTo")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("TaxSalaryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("TaxSalaryId");

                    b.ToTable("SalaryTaxSlabs");
                });

            modelBuilder.Entity("Focus.Domain.Entities.SalaryTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("StructureName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("SalaryTemplates");
                });

            modelBuilder.Entity("Focus.Domain.Entities.Sale", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AreaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BarCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BillingAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("BillingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CashCustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Change")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CounterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("CustomerAddressWalkIn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CustomerInquiry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DayId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeliveryAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DeliveryChallanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeliveryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeliveryNoteAndDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("DispatchDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DoctorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DocumentType")
                        .HasColumnType("int");

                    b.Property<decimal>("DueAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("HospitalName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IgnoreCashCreditForNumber")
                        .HasColumnType("bit");

                    b.Property<string>("ImageSizeHeight")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageSizeWidth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("InquiryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InquiryNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvoiceNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InvoiceType")
                        .HasColumnType("int");

                    b.Property<bool>("IsBeforeTax")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCashCustomer")
                        .HasColumnType("bit");

                    b.Property<bool>("IsClose")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCredit")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDiscountOnTransaction")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFixed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMsgSended")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOverWrite")
                        .HasColumnType("bit");

                    b.Property<bool>("IsProcessed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsProformaInvoice")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPurchaseOrder")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSaleReturn")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSaleReturnPost")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSendMsg")
                        .HasColumnType("bit");

                    b.Property<bool>("IsService")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVatChange")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWarranty")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LogisticId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("MarkAsCompleted")
                        .HasColumnType("bit");

                    b.Property<string>("Mobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<Guid?>("NationalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("OtherCurrencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PartiallyInvoices")
                        .HasColumnType("int");

                    b.Property<string>("PerfomaValidUpto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PeriodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PeroformaInvoiceNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PickUpDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PoDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PoNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProcessedNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ProformaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PurchaseOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PurchaseOrderNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("QuotationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("QuotationNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuotationValidUpto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ReceivedAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ReferredBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefrenceNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistrationNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SaleHoldTypes")
                        .HasColumnType("int");

                    b.Property<Guid?>("SaleInvoiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SaleOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SaleOrderNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SaleReturnInvoiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ShippingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TaxMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TaxRateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TermAndCondition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TermAndConditionAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TerminalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TotalAfterDiscount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalWithOutAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TransactionLevelDiscount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnRegisteredVAtAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("UnRegisteredVatId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("VatAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("WareHouseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WarrantyLogoPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Year")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("CashCustomerId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("LogisticId");

                    b.HasIndex("OtherCurrencyId")
                        .IsUnique()
                        .HasFilter("[OtherCurrencyId] IS NOT NULL");

                    b.HasIndex("QuotationId");

                    b.HasIndex("SaleOrderId");

                    b.HasIndex("TaxRateId");

                    b.HasIndex("UnRegisteredVatId");

                    b.ToTable("Sales");
                });

            modelBuilder.Entity("Focus.Domain.Entities.SaleInvoiceAdvancePayment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<Guid?>("SaleInvoiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SaleOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("SaleInvoiceId");

                    b.HasIndex("SaleOrderId");

                    b.ToTable("SaleInvoiceAdvancePayments");
                });

            modelBuilder.Entity("Focus.Domain.Entities.SaleInvoiceDiscount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("DiscountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("DiscountPercent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<Guid?>("SaleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("DiscountId");

                    b.HasIndex("SaleId");

                    b.ToTable("SaleInvoiceDiscounts");
                });

            modelBuilder.Entity("Focus.Domain.Entities.SaleItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AutoNumber")
                        .HasColumnType("int");

                    b.Property<DateTime?>("BatchExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("BatchNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("BundleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Buy")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ColorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CounterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DayId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("DocumentDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("FixDiscount")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("Get")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("GuaranteeDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFree")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFreeWithBundle")
                        .HasColumnType("bit");

                    b.Property<decimal>("OfferQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PromotionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PromotionItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("PromotionOfferQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("RemainingQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("SaleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Scheme")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("SchemePhysicalQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("SchemeQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Serial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SerialNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ServiceItem")
                        .HasColumnType("bit");

                    b.Property<Guid?>("SoItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StyleNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TaxRateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalWithOutAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UnitName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,4)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("VatAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("WareHouseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BundleId");

                    b.HasIndex("ColorId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ProductId");

                    b.HasIndex("PromotionId");

                    b.HasIndex("PromotionItemId");

                    b.HasIndex("SaleId");

                    b.HasIndex("TaxRateId");

                    b.HasIndex("WareHouseId");

                    b.ToTable("SaleItems");
                });

            modelBuilder.Entity("Focus.Domain.Entities.SaleOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ApprovalStatus")
                        .HasColumnType("int");

                    b.Property<string>("Attiendie")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Attn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BarCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("BillingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClientPurchaseNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Commodities")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CommodityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("CustomerAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CustomerInquiry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Days")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DeliveryChallanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeliveryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeliveryNoteAndDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("DispatchDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DoctorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("For")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FreeTimePOD")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FreeTimePOL")
                        .HasColumnType("datetime2");

                    b.Property<string>("HospitalName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("IncotermsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("InquiryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InquiryNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvoiceNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBeforeTax")
                        .HasColumnType("bit");

                    b.Property<bool>("IsClose")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDiscountOnTransaction")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFixed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFreight")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLabour")
                        .HasColumnType("bit");

                    b.Property<bool>("IsProcessed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsQuotation")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSaleOrderTracking")
                        .HasColumnType("bit");

                    b.Property<bool>("IsService")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUsedForBom")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LogisticId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Mobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<Guid?>("NationalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NatureOfCargo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NoteAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NoteDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OneTimeDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("OrderTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PartiallyInvoices")
                        .HasColumnType("int");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PerfomaValidUpto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PeriodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PeroformaInvoiceNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PickUpDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PoDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PoNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProcessedNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ProformaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PurchaseOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PurchaseOrderNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Purpose")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("QuotationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("QuotationNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("QuotationValidDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("QuotationValidUpto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReferredBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Refrence")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefrenceNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistrationNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SaleOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SaleOrderNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SheduleDelivery")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ShippingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TaxRateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TerminalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TotalAfterDiscount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalWithOutAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TransactionLevelDiscount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("ValidityDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("VatAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("WareHouseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WarrantyLogoPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Year")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CommodityId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("IncotermsId");

                    b.HasIndex("LogisticId");

                    b.HasIndex("OrderTypeId");

                    b.HasIndex("TaxRateId");

                    b.ToTable("SaleOrders");
                });

            modelBuilder.Entity("Focus.Domain.Entities.SaleOrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("BatchExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("BatchNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("FixDiscount")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("GuaranteeDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFree")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUsedForBom")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("QuantityOut")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("SaleOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SaleOrderVersionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Scheme")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("SchemePhysicalQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("SchemeQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Serial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ServiceItem")
                        .HasColumnType("bit");

                    b.Property<string>("StyleNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TaxRateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalWithOutAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UnitName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("VatAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("WareHouseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SaleOrderId");

                    b.HasIndex("SaleOrderVersionId");

                    b.HasIndex("TaxRateId");

                    b.HasIndex("WareHouseId");

                    b.ToTable("SaleOrderItems");
                });

            modelBuilder.Entity("Focus.Domain.Entities.SaleOrderPayment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ChequeNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Narration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<int>("PaymentMode")
                        .HasColumnType("int");

                    b.Property<Guid?>("PaymentVoucherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SaleOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("VoucherNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("PaymentVoucherId");

                    b.HasIndex("SaleOrderId");

                    b.ToTable("SaleOrderPayments");
                });

            modelBuilder.Entity("Focus.Domain.Entities.SaleOrderVersion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("DocumentNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsQuotation")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<Guid?>("SaleOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SaleOrderVersionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Version")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("SaleOrderId");

                    b.ToTable("SaleOrderVersions");
                });

            modelBuilder.Entity("Focus.Domain.Entities.SalePayment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,4)");

                    b.Property<Guid?>("BankCashAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Change")
                        .HasColumnType("decimal(18,4)");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CounterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<Guid?>("DayId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("DueAmount")
                        .HasColumnType("decimal(18,4)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PaymentOptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PaymentType")
                        .HasColumnType("int");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Received")
                        .HasColumnType("decimal(18,4)");

                    b.Property<Guid>("SaleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("PaymentOptionId");

                    b.HasIndex("SaleId");

                    b.ToTable("SalePayments");
                });

            modelBuilder.Entity("Focus.Domain.Entities.SaleSizeAssortment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CounterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DayId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("PurchasePostItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid?>("SaleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SaleItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SizeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("PurchasePostItemId");

                    b.HasIndex("SaleId");

                    b.HasIndex("SaleItemId");

                    b.HasIndex("SizeId");

                    b.ToTable("SaleSizeAssortments");
                });

            modelBuilder.Entity("Focus.Domain.Entities.SampleRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ApprovalStatus")
                        .HasColumnType("int");

                    b.Property<string>("ArabicName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EnglishName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("NoOfSampleRequests")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReferredBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestGenerated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.ToTable("SampleRequests");
                });

            modelBuilder.Entity("Focus.Domain.Entities.SampleRequestItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ArabicName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnglishName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HighQuantity")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("SampleRequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UnitPerPack")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SampleRequestId");

                    b.ToTable("SampleRequestItems");
                });

            modelBuilder.Entity("Focus.Domain.Entities.ShiftAssign", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Friday")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<bool>("Monday")
                        .HasColumnType("bit");

                    b.Property<string>("ReasonOfClosingShift")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Saturday")
                        .HasColumnType("bit");

                    b.Property<string>("ShiftName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Sunday")
                        .HasColumnType("bit");

                    b.Property<bool>("Thursday")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Tuesday")
                        .HasColumnType("bit");

                    b.Property<bool>("Wednesday")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("ShiftAssigns");
                });

            modelBuilder.Entity("Focus.Domain.Entities.ShiftEmployeeAssign", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("ReasonOfClosingShift")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ShiftAssignId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ShiftAssignId");

                    b.ToTable("ShiftEmployeeAssigns");
                });

            modelBuilder.Entity("Focus.Domain.Entities.ShiftRun", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FromTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<Guid?>("ShiftAssignId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ToTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ShiftAssignId");

                    b.ToTable("ShiftRuns");
                });

            modelBuilder.Entity("Focus.Domain.Entities.ShiftRunEmployee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<Guid?>("ShiftRunId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ShiftRunId");

                    b.ToTable("ShiftRunEmployees");
                });

            modelBuilder.Entity("Focus.Domain.Entities.Size", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameArabic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Sizes");
                });

            modelBuilder.Entity("Focus.Domain.Entities.Stock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("AveragePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CounterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<decimal>("CurrentQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CurrentStockValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("DayId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WareHouseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ProductId");

                    b.HasIndex("WareHouseId");

                    b.ToTable("Stocks");
                });

            modelBuilder.Entity("Focus.Domain.Entities.StockAdjustment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BankCashAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSerial")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Narration")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid?>("PeriodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StockAdjustmentType")
                        .HasColumnType("int");

                    b.Property<string>("TaxMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TaxRateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WarehouseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Year")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isDraft")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("TaxRateId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("StockAdjustments");
                });

            modelBuilder.Entity("Focus.Domain.Entities.StockAdjustmentDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AutoNumber")
                        .HasColumnType("int");

                    b.Property<DateTime?>("BatchExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("BatchNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("GuaranteeDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSerial")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,4)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Quantity")
                        .HasMaxLength(5)
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("Serial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SerialNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StockAdjustmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WarehouseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("WarrantyTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ProductId");

                    b.HasIndex("StockAdjustmentId");

                    b.HasIndex("WarehouseId");

                    b.HasIndex("WarrantyTypeId");

                    b.ToTable("StockAdjustmentDetails");
                });

            modelBuilder.Entity("Focus.Domain.Entities.StockReceived", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ApprovalStatus")
                        .HasColumnType("int");

                    b.Property<Guid?>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("DriverName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DriverNationalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DriverNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("FromBranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<Guid?>("PeriodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("StockRequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("StockTransferId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("StockTransferStatus")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("VehicalNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("WarehouseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Year")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("StockTransferId");

                    b.ToTable("StockReceived");
                });

            modelBuilder.Entity("Focus.Domain.Entities.StockReceivedItems", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,4)");

                    b.Property<Guid?>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("ReceivedQuantity")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("RemainingQuantity")
                        .HasColumnType("decimal(18,4)");

                    b.Property<Guid>("StockReceivedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TransferAmount")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("TransferQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("lineTotal")
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ProductId");

                    b.HasIndex("StockReceivedId");

                    b.ToTable("StockReceivedItems");
                });

            modelBuilder.Entity("Focus.Domain.Entities.StockRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ApprovalStatus")
                        .HasColumnType("int");

                    b.Property<Guid?>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("FromBranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FromWareHouse")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<Guid?>("PeriodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("StockRequestStatus")
                        .HasColumnType("int");

                    b.Property<Guid?>("ToBranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("WarehouseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Year")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("StockRequests");
                });

            modelBuilder.Entity("Focus.Domain.Entities.StockRequestItems", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("RemainingQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("StockRequestId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ProductId");

                    b.HasIndex("StockRequestId");

                    b.ToTable("StockRequestItems");
                });

            modelBuilder.Entity("Focus.Domain.Entities.StockTransfer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ApprovalStatus")
                        .HasColumnType("int");

                    b.Property<Guid?>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("DriverName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DriverNationalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DriverNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<Guid?>("PeriodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("StockRequesBranchtId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("StockRequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("StockTransferStatus")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("VehicalNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("VoucherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("WarehouseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Year")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("StockRequestId");

                    b.ToTable("StockTransfers");
                });

            modelBuilder.Entity("Focus.Domain.Entities.StockTransferItems", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,4)");

                    b.Property<Guid?>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("LineTotal")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("RemainingQuantity")
                        .HasColumnType("decimal(18,4)");

                    b.Property<Guid>("StockTransferId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TransferAmount")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("TransferQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ProductId");

                    b.HasIndex("StockTransferId");

                    b.ToTable("StockTransferItems");
                });

            modelBuilder.Entity("Focus.Domain.Entities.SubCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NameArabic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CompanyId");

                    b.ToTable("SubCategories");
                });

            modelBuilder.Entity("Focus.Domain.Entities.SyncPushPullRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ChangeDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ColumnId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ColumnName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ColumnType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DocumentNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsGeneral")
                        .HasColumnType("bit");

                    b.Property<bool>("Pull")
                        .HasColumnType("bit");

                    b.Property<string>("PullDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Push")
                        .HasColumnType("bit");

                    b.Property<string>("PushDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Table")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SyncPushPullRecords");
                });

            modelBuilder.Entity("Focus.Domain.Entities.SyncRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Action")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<Guid?>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ChangeDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ColumnId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ColumnName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ColumnType")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DocumentNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsGeneral")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("Pull")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("PullDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Push")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("PushDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Table")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("SyncRecords");
                });

            modelBuilder.Entity("Focus.Domain.Entities.TaxRate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameArabic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("TaxRates");
                });

            modelBuilder.Entity("Focus.Domain.Entities.TaxSalary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("FinancialYear")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("TaxYear")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("TaxSalaries");
                });

            modelBuilder.Entity("Focus.Domain.Entities.TemporaryCashAllocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ApprovalStatus")
                        .HasColumnType("int");

                    b.Property<string>("ApprovedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("BankCashAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ChequeNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CounterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DayId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DraftBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DraftDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Narration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<int>("PaymentMode")
                        .HasColumnType("int");

                    b.Property<int>("PaymentVoucherType")
                        .HasColumnType("int");

                    b.Property<Guid?>("PeriodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RejectBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RejectDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserEmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VoidBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VoidDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("VoucherNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Year")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BankCashAccountId");

                    b.HasIndex("CompanyId");

                    b.ToTable("TemporaryCashAllocations");
                });

            modelBuilder.Entity("Focus.Domain.Entities.TemporaryCashIssue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ApprovalStatus")
                        .HasColumnType("int");

                    b.Property<Guid?>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CashIssuerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCashRequesterUser")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("NewUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PeriodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistrationNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TemporaryCashRequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Year")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("TemporaryCashRequestId");

                    b.ToTable("TemporaryCashIssues");
                });

            modelBuilder.Entity("Focus.Domain.Entities.TemporaryCashIssueExpense", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<Guid?>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DocumentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<Guid?>("PeriodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TemporaryCashIssueId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Year")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("TemporaryCashIssueId");

                    b.ToTable("TemporaryCashIssueExpenses");
                });

            modelBuilder.Entity("Focus.Domain.Entities.TemporaryCashIssueItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<Guid>("TemporaryCashIssueId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("TemporaryCashIssueId");

                    b.ToTable("TemporaryCashIssueItems");
                });

            modelBuilder.Entity("Focus.Domain.Entities.TemporaryCashRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ApprovalStatus")
                        .HasColumnType("int");

                    b.Property<Guid?>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCashRequesterUser")
                        .HasColumnType("bit");

                    b.Property<bool>("IsClose")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("NewUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PeriodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RegistrationNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Year")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("TemporaryCashRequests");
                });

            modelBuilder.Entity("Focus.Domain.Entities.TemporaryCashRequestItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<Guid>("TemporaryCashRequestId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("TemporaryCashRequestId");

                    b.ToTable("TemporaryCashRequestItems");
                });

            modelBuilder.Entity("Focus.Domain.Entities.TemporaryCashReturn", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCashRequesterUser")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<Guid?>("PeriodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RegistrationNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TemporaryCashIssueId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Year")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("TemporaryCashIssueId");

                    b.ToTable("TemporaryCashReturns");
                });

            modelBuilder.Entity("Focus.Domain.Entities.Terminal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BusinessLogo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BusinessNameArabic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BusinessNameEnglish")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BusinessTypeArabic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BusinessTypeEnglish")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CashAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyNameArabic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyNameEnglish")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("IPAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("MACAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<bool>("OnPageLoadItem")
                        .HasColumnType("bit");

                    b.Property<bool>("OverWrite")
                        .HasColumnType("bit");

                    b.Property<Guid?>("PosTerminalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PrinterName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TerminalType")
                        .HasColumnType("int");

                    b.Property<int>("TerminalUserType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CashAccountId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("PosTerminalId");

                    b.ToTable("Terminals");
                });

            modelBuilder.Entity("Focus.Domain.Entities.TerminalCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<Guid>("TerminalId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("TerminalId");

                    b.ToTable("TerminalCategories");
                });

            modelBuilder.Entity("Focus.Domain.Entities.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ContactId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CounterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<decimal>("Credit")
                        .HasColumnType("decimal(18,4)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DayId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Debit")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DocumentDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<Guid?>("PeriodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TransactionType")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Year")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("PeriodId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Focus.Domain.Entities.TransactionApplicationLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("DeleteFromHistory")
                        .HasColumnType("int");

                    b.Property<int>("FreshLogMovingDays")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("TransactionApplicationLogs");
                });

            modelBuilder.Entity("Focus.Domain.Entities.TransferHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("BankAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("CarryCash")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CashInHand")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CounterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("CreditReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("DayEndUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DayStartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DayStartUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ExpenseCash")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("FromTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExpenseDay")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int>("NoOfTransaction")
                        .HasColumnType("int");

                    b.Property<decimal>("OpeningCash")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StartTerminalBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StartTerminalFor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("SupervisorCash")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("ToTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalCash")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("VerifyCash")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("TransferHistories");
                });

            modelBuilder.Entity("Focus.Domain.Entities.Transporter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Transporters");
                });

            modelBuilder.Entity("Focus.Domain.Entities.Unit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameArabic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("Focus.Domain.Entities.UserDefineFlow", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<bool>("PartiallyQuotation")
                        .HasColumnType("bit");

                    b.Property<bool>("PartiallySaleOrder")
                        .HasColumnType("bit");

                    b.Property<bool>("QuotationToSaleInvoice")
                        .HasColumnType("bit");

                    b.Property<bool>("QuotationToSaleOrder")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("UserDefineFlows");
                });

            modelBuilder.Entity("Focus.Domain.Entities.UserLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApprovalStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DocumentNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("UserLogs");
                });

            modelBuilder.Entity("Focus.Domain.Entities.UserTerminal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TerminalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("TerminalId");

                    b.ToTable("UserTerminals");
                });

            modelBuilder.Entity("Focus.Domain.Entities.VariationInventory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ColorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("SizeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("VariationInventories");
                });

            modelBuilder.Entity("Focus.Domain.Entities.VariationInventoryForReporting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ColorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("SizeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TransactionType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("VariationInventoryForReportings");
                });

            modelBuilder.Entity("Focus.Domain.Entities.Warehouse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CCTVLicenseExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("CCTVLicenseNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CivilDefenceLicenseExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("CivilDefenceLicenseNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContactNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LicenseExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("LicenseNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameArabic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StoreID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Warehouses");
                });

            modelBuilder.Entity("Focus.Domain.Entities.WareHouseTransfer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ApprovalStatus")
                        .HasColumnType("int");

                    b.Property<Guid?>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("FromBranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FromWareHouseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<Guid?>("PeriodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ToBranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ToWareHouseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Year")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ToWareHouseId");

                    b.ToTable("WareHouseTransfers");
                });

            modelBuilder.Entity("Focus.Domain.Entities.WareHouseTransferItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,4)");

                    b.Property<Guid>("WareHouseTransferId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ProductId");

                    b.HasIndex("WareHouseTransferId");

                    b.ToTable("WareHouseTransferItems");
                });

            modelBuilder.Entity("Focus.Domain.Entities.WarrantyType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameArabic")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("WarrantyTypes");
                });

            modelBuilder.Entity("Focus.Domain.Entities.WeekHoliday", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("HolidayId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameArabic")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("HolidayId");

                    b.ToTable("WeekHolidays");
                });

            modelBuilder.Entity("Focus.Domain.Entities.WhiteLabeling", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AddressLine1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApplicationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CancelBgBtnColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CancelBtnColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FavName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Heading")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HeadingColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvoiceTitleBgColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvoiceTitleColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SaveBtnBgColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SaveBtnColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SideMenuBtnClickColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SideMenuBtnColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SideMenuColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableHeaderBgColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableHeaderColor")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("WhiteLabelings");
                });

            modelBuilder.Entity("Focus.Domain.Entities.WorkWeek", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("WorkWeeks");
                });

            modelBuilder.Entity("Focus.Domain.Entities.YearlyPeriod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsYearlyPeriodClosed")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("MonthType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("YearlyPeriods");
                });

            modelBuilder.Entity("Focus.Domain.Entities.Zone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Zones");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "C1448F88-49B4-476C-B07D-33514A0F9C1E",
                            ConcurrencyStamp = "0590a33c-cd2d-4c93-9e17-fce19bc2bd9d",
                            Name = "Noble Admin",
                            NormalizedName = "NOBLE ADMIN"
                        },
                        new
                        {
                            Id = "C1448F88-49CS-476C-B07D-33514A0F9C1E",
                            ConcurrencyStamp = "4590A33c-cd2d-4c93-9e17-fcE19bc2bd9d",
                            Name = "Supervisor",
                            NormalizedName = "SUPERVISOR"
                        },
                        new
                        {
                            Id = "C1448F88-49B4-476C-B07D-33514A0F3C1F",
                            ConcurrencyStamp = "0C90a33c-cd2d-4c93-9e17-fce14bc2bd9d",
                            Name = "Mobile Customer",
                            NormalizedName = "MOBILE CUSTOMER"
                        },
                        new
                        {
                            Id = "S1448F88-49B4-476C-B07D-33514A0F3C1F",
                            ConcurrencyStamp = "0C90a33c-dd2d-5c93-9e17-fce14bc2bd9d",
                            Name = "Order Tracker",
                            NormalizedName = "ORDER TRACKER"
                        },
                        new
                        {
                            Id = "S1448F55-49B4-476C-B07D-33514A0F3C1F",
                            ConcurrencyStamp = "0C90a33c-dd2d-5c93-9e17-FCS14bc2bd9d",
                            Name = "Sale Man",
                            NormalizedName = "SALE MAN"
                        },
                        new
                        {
                            Id = "52E0A954-7039-483B-9224-99990743636D",
                            ConcurrencyStamp = "0590a33c-cd2d-4c93-9e17-fce12bc2bd9d",
                            Name = "Super Admin",
                            NormalizedName = "SUPER ADMIN"
                        },
                        new
                        {
                            Id = "CEA36602-E3BD-4CF6-B186-5D8A3E558A04",
                            ConcurrencyStamp = "0590a33c-cd2d-4d93-9e17-fce19bc2bd9d",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "E5480E8E-A150-4C80-82AB-62B5A8EBFD1B",
                            ConcurrencyStamp = "1590a33c-cd2d-4c93-9e17-fce19bc2bd9d",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "Email",
                            ClaimValue = "noble@gmail.com",
                            UserId = "5f8d5614-2c7e-4ec0-868c-d254e6516b4d"
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "CompanyId",
                            ClaimValue = "5f8d5614-2c7e-4ec0-868c-d254e6516b4d",
                            UserId = "5f8d5614-2c7e-4ec0-868c-d254e6516b4d"
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "Organization",
                            ClaimValue = "Noble POS",
                            UserId = "5f8d5614-2c7e-4ec0-868c-d254e6516b4d"
                        },
                        new
                        {
                            Id = 4,
                            ClaimType = "FullName",
                            ClaimValue = "Noble App",
                            UserId = "5f8d5614-2c7e-4ec0-868c-d254e6516b4d"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "5f8d5614-2c7e-4ec0-868c-d254e6516b4d",
                            RoleId = "C1448F88-49B4-476C-B07D-33514A0F9C1E"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Focus.Business.Users.ApplicationUser", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Bank", "Bank")
                        .WithMany()
                        .HasForeignKey("BankId");

                    b.Navigation("Bank");
                });

            modelBuilder.Entity("Focus.Domain.Entities.Account", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.CostCenter", "CostCenter")
                        .WithMany("Accounts")
                        .HasForeignKey("CostCenterId");

                    b.Navigation("CostCenter");
                });

            modelBuilder.Entity("Focus.Domain.Entities.AccountsLevelOne", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Focus.Domain.Entities.AccountsLevelTwo", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Focus.Domain.Entities.AccountType", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Focus.Domain.Entities.Allowance", b =>
                {
                    b.HasOne("Focus.Domain.Entities.AllowanceType", "AllowanceType")
                        .WithMany("Allowances")
                        .HasForeignKey("AllowanceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AllowanceType");
                });

            modelBuilder.Entity("Focus.Domain.Entities.AllowanceType", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Focus.Domain.Entities.ApplicationUpdate", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Focus.Domain.Entities.ApprovalSystem", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Focus.Domain.Entities.ApprovalSystemEmployees", b =>
                {
                    b.HasOne("Focus.Domain.Entities.ApprovalSystem", "ApprovalSystem")
                        .WithMany("ApprovalSystemEmployees")
                        .HasForeignKey("ApprovalSystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.EmployeeRegistration", "EmployeeRegistration")
                        .WithMany("ApprovalSystemEmployees")
                        .HasForeignKey("EmployeeId");

                    b.Navigation("ApprovalSystem");

                    b.Navigation("EmployeeRegistration");
                });

            modelBuilder.Entity("Focus.Domain.Entities.Attachment", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Focus.Domain.Entities.AutoPurchaseSetting", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Focus.Domain.Entities.AutoPurchaseTemplate", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Contact", "Supplier")
                        .WithMany("AutoPurchaseTemplates")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Focus.Domain.Entities.AutoPurchaseTemplateItem", b =>
                {
                    b.HasOne("Focus.Domain.Entities.AutoPurchaseTemplate", "AutoPurchaseTemplate")
                        .WithMany("AutoPurchaseTemplateItems")
                        .HasForeignKey("AutoPurchaseTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.TaxRate", "TaxRate")
                        .WithMany("AutoPurchaseTemplateItems")
                        .HasForeignKey("TaxRateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AutoPurchaseTemplate");

                    b.Navigation("Product");

                    b.Navigation("TaxRate");
                });

            modelBuilder.Entity("Focus.Domain.Entities.Bank", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Account", "Account")
                        .WithMany("Banks")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Currency", "Currency")
                        .WithMany("Banks")
                        .HasForeignKey("CurrencyId");

                    b.Navigation("Account");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("Focus.Domain.Entities.BankPosTerminal", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Account", "Account")
                        .WithMany("BankPosTerminals")
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Focus.Domain.Entities.BatchCosting", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.RecipeNo", "RecipeNo")
                        .WithMany("BatchCostings")
                        .HasForeignKey("RecipeNoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RecipeNo");
                });

            modelBuilder.Entity("Focus.Domain.Entities.BatchCostingItem", b =>
                {
                    b.HasOne("Focus.Domain.Entities.BatchCosting", "BatchCosting")
                        .WithMany("BatchCostingItems")
                        .HasForeignKey("BatchCostingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BatchCosting");
                });

            modelBuilder.Entity("Focus.Domain.Entities.BatchProcess", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Process", "Process")
                        .WithMany()
                        .HasForeignKey("ProcessId");

                    b.HasOne("Focus.Domain.Entities.ProductionBatch", "ProductionBatch")
                        .WithMany("BatchProcesses")
                        .HasForeignKey("ProductionBatchId");

                    b.HasOne("Focus.Domain.Entities.Warehouse", "Warehouse")
                        .WithMany("BatchProcesses")
                        .HasForeignKey("WarehouseId");

                    b.Navigation("Process");

                    b.Navigation("ProductionBatch");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Focus.Domain.Entities.BatchProcessContractor", b =>
                {
                    b.HasOne("Focus.Domain.Entities.BatchProcess", "BatchProcess")
                        .WithMany("BatchProcessContractors")
                        .HasForeignKey("BatchProcessId");

                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.EmployeeRegistration", "Contractor")
                        .WithMany("BatchProcessContractors")
                        .HasForeignKey("ContractorId");

                    b.HasOne("Focus.Domain.Entities.Contractor", null)
                        .WithMany("BatchProcessContractors")
                        .HasForeignKey("ContractorId3");

                    b.Navigation("BatchProcess");

                    b.Navigation("Contractor");
                });

            modelBuilder.Entity("Focus.Domain.Entities.BillAttachment", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.PurchaseBill", "PurchaseBill")
                        .WithMany("BillAttachments")
                        .HasForeignKey("PurchaseBillId");

                    b.Navigation("PurchaseBill");
                });

            modelBuilder.Entity("Focus.Domain.Entities.Bom", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Focus.Domain.Entities.BomRawProducts", b =>
                {
                    b.HasOne("Focus.Domain.Entities.BomSaleOrderItems", "BomSaleOrderItems")
                        .WithMany("BomRawProducts")
                        .HasForeignKey("BomSaleOrderItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Product", "Products")
                        .WithMany("BomRawProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BomSaleOrderItems");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Focus.Domain.Entities.BomSaleOrderItems", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Bom", "Boms")
                        .WithMany("BomSaleOrderItems")
                        .HasForeignKey("BomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Product", "Products")
                        .WithMany("BomSaleOrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Boms");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Focus.Domain.Entities.BranchItems", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Product", "Products")
                        .WithMany("BranchItems")
                        .HasForeignKey("ProductId");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Focus.Domain.Entities.BranchUser", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Branch", "Branch")
                        .WithMany("BranchUsers")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("Focus.Domain.Entities.BranchVoucher", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Account", "Account")
                        .WithMany("BranchVoucherBankCash")
                        .HasForeignKey("BankCashAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Account", "ContactAccount")
                        .WithMany("BranchVoucherContact")
                        .HasForeignKey("ContactAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.TaxRate", "TaxRate")
                        .WithMany("BranchVouchers")
                        .HasForeignKey("TaxRateId");

                    b.Navigation("Account");

                    b.Navigation("ContactAccount");

                    b.Navigation("TaxRate");
                });

            modelBuilder.Entity("Focus.Domain.Entities.BranchWisePermission", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Focus.Domain.Entities.Brand", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Focus.Domain.Entities.BundleCategory", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Product", "Product")
                        .WithMany("BundleCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Focus.Domain.Entities.BundleOfferBranches", b =>
                {
                    b.HasOne("Focus.Domain.Entities.BundleCategory", "BundleCategories")
                        .WithMany("BundleOfferBranches")
                        .HasForeignKey("BundleCategoriesId");

                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.PromotionOffer", "PromotionOffer")
                        .WithMany("BundleOfferBranches")
                        .HasForeignKey("PromotionOfferId");

                    b.Navigation("BundleCategories");

                    b.Navigation("PromotionOffer");
                });

            modelBuilder.Entity("Focus.Domain.Entities.CashCustomer", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Focus.Domain.Entities.CashRequestUser", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Focus.Domain.Entities.CashVoucher", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Focus.Domain.Entities.Category", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Account", "COGSAccount")
                        .WithMany("COGSAccounts")
                        .HasForeignKey("COGSAccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Account", "IncomeAccount")
                        .WithMany("IncomeAccounts")
                        .HasForeignKey("IncomeAccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Focus.Domain.Entities.Account", "InventoryAccount")
                        .WithMany("InventoryAccounts")
                        .HasForeignKey("InventoryAccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Focus.Domain.Entities.Account", "PurchaseAccount")
                        .WithMany("PurchaseAccounts")
                        .HasForeignKey("PurchaseAccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Focus.Domain.Entities.Account", "SaleAccount")
                        .WithMany("SaleAccounts")
                        .HasForeignKey("SaleAccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("COGSAccount");

                    b.Navigation("IncomeAccount");

                    b.Navigation("InventoryAccount");

                    b.Navigation("PurchaseAccount");

                    b.Navigation("SaleAccount");
                });

            modelBuilder.Entity("Focus.Domain.Entities.ChequeBook", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Bank", "Bank")
                        .WithMany("ChequeBooks")
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Bank");
                });

            modelBuilder.Entity("Focus.Domain.Entities.ChequeBookItem", b =>
                {
                    b.HasOne("Focus.Domain.Entities.ChequeBook", "ChequeBook")
                        .WithMany("GetChequeBookItems")
                        .HasForeignKey("ChequeBookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ChequeBook");
                });

            modelBuilder.Entity("Focus.Domain.Entities.City", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Focus.Domain.Entities.Color", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Focus.Domain.Entities.CompanyAccountSetup", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Focus.Domain.Entities.CompanyAttachment", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", "Company")
                        .WithMany("CompanyAttachments")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Focus.Domain.Entities.CompanyHolidays", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Focus.Domain.Entities.CompanyInformation", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", "Company")
                        .WithOne("CompanyInformation")
                        .HasForeignKey("Focus.Domain.Entities.CompanyInformation", "CompanyId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Focus.Domain.Entities.CompanyLicence", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", "Company")
                        .WithMany("CompanyLicences")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Focus.Domain.Entities.CompanyOption", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Focus.Domain.Entities.CompanyPermission", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.NobleGroup", "NobleGroup")
                        .WithMany("CompanyPermissions")
                        .HasForeignKey("NobleGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.NobleModule", "NobleModules")
                        .WithMany("CompanyPermissions")
                        .HasForeignKey("NobleModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NobleGroup");

                    b.Navigation("NobleModules");
                });

            modelBuilder.Entity("Focus.Domain.Entities.CompanyProcess", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Focus.Domain.Entities.CompanySubmissionPeriod", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.YearlyPeriod", "YearlyPeriod")
                        .WithMany("CompanySubmissionPeriods")
                        .HasForeignKey("YearlyPeriodId");

                    b.Navigation("YearlyPeriod");
                });

            modelBuilder.Entity("Focus.Domain.Entities.Contact", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Account", "Account")
                        .WithMany("Contacts")
                        .HasForeignKey("AccountId");

                    b.HasOne("Focus.Domain.Entities.Account", "AdvanceAccount")
                        .WithMany("ContactAdvanceAccount")
                        .HasForeignKey("AdvanceAccountId");

                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Currency", "Currency")
                        .WithMany("Contacts")
                        .HasForeignKey("CurrencyId");

                    b.HasOne("Focus.Domain.Entities.CustomerGroup", "CustomerGroups")
                        .WithMany("Contacts")
                        .HasForeignKey("CustomerGroupId");

                    b.HasOne("Focus.Domain.Entities.Region", "Region")
                        .WithMany("Contacts")
                        .HasForeignKey("RegionId");

                    b.HasOne("Focus.Domain.Entities.Account", "SupplierCashAccount")
                        .WithMany("ContactCashAccount")
                        .HasForeignKey("SupplierCashAccountId");

                    b.HasOne("Focus.Domain.Entities.TaxRate", "TaxRate")
                        .WithMany("Contacts")
                        .HasForeignKey("TaxRateId");

                    b.Navigation("Account");

                    b.Navigation("AdvanceAccount");

                    b.Navigation("Currency");

                    b.Navigation("CustomerGroups");

                    b.Navigation("Region");

                    b.Navigation("SupplierCashAccount");

                    b.Navigation("TaxRate");
                });

            modelBuilder.Entity("Focus.Domain.Entities.ContactAttachment", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Contact", "Contact")
                        .WithMany("ContactAttachments")
                        .HasForeignKey("ContactId");

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("Focus.Domain.Entities.ContactBankAccount", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Contact", "Contact")
                        .WithMany("ContactBankAccounts")
                        .HasForeignKey("ContactId");

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("Focus.Domain.Entities.ContactPerson", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Contact", "Contact")
                        .WithMany("ContactPersons")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("Focus.Domain.Entities.Contractor", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Focus.Domain.Entities.ContractorItem", b =>
                {
                    b.HasOne("Focus.Domain.Entities.BatchProcessContractor", "BatchProcessContractor")
                        .WithMany("ContractorItems")
                        .HasForeignKey("BatchProcessContractorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Product", "Product")
                        .WithMany("ContractorItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BatchProcessContractor");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Focus.Domain.Entities.ContractorPayment", b =>
                {
                    b.HasOne("Focus.Domain.Entities.BatchProcessContractor", "BatchProcessContractor")
                        .WithMany("ContractorPayments")
                        .HasForeignKey("BatchProcessContractorId");

                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.PaymentVoucher", "PaymentVoucher")
                        .WithMany("ContractorPayments")
                        .HasForeignKey("PaymentVoucherId");

                    b.Navigation("BatchProcessContractor");

                    b.Navigation("PaymentVoucher");
                });

            modelBuilder.Entity("Focus.Domain.Entities.Contribution", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Focus.Domain.Entities.CostCenter", b =>
                {
                    b.HasOne("Focus.Domain.Entities.AccountType", "AccountTypes")
                        .WithMany("CostCenters")
                        .HasForeignKey("AccountTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AccountTypes");
                });

            modelBuilder.Entity("Focus.Domain.Entities.CreditNote", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Contact", "Contact")
                        .WithMany("CreditNotes")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.PurchasePost", "PurchasePost")
                        .WithMany("CreditNotes")
                        .HasForeignKey("PurchasePostId");

                    b.HasOne("Focus.Domain.Entities.Sale", "Sale")
                        .WithMany("CreditNotes")
                        .HasForeignKey("SaleId");

                    b.Navigation("Contact");

                    b.Navigation("PurchasePost");

                    b.Navigation("Sale");
                });

            modelBuilder.Entity("Focus.Domain.Entities.CreditNoteItem", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.CreditNote", "CreditNote")
                        .WithMany("CreditNoteItems")
                        .HasForeignKey("CreditNoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Product", "Product")
                        .WithMany("CreditNoteItems")
                        .HasForeignKey("ProductId");

                    b.HasOne("Focus.Domain.Entities.TaxRate", "TaxRate")
                        .WithMany("CreditNoteItems")
                        .HasForeignKey("TaxRateId");

                    b.HasOne("Focus.Domain.Entities.Warehouse", "WareHouse")
                        .WithMany("CreditNoteItems")
                        .HasForeignKey("WareHouseId");

                    b.Navigation("CreditNote");

                    b.Navigation("Product");

                    b.Navigation("TaxRate");

                    b.Navigation("WareHouse");
                });

            modelBuilder.Entity("Focus.Domain.Entities.Currency", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Focus.Domain.Entities.CustomerDiscount", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Focus.Domain.Entities.CustomerGroup", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Focus.Domain.Entities.DailyExpense", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Account", "Account")
                        .WithMany("DailyExpenses")
                        .HasForeignKey("AccountId");

                    b.HasOne("Focus.Domain.Entities.PurchaseBill", "PurchaseBill")
                        .WithMany("DailyExpenses")
                        .HasForeignKey("BillerAccountId");

                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("PurchaseBill");
                });

            modelBuilder.Entity("Focus.Domain.Entities.DailyExpenseAttachment", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.DailyExpense", "DailyExpense")
                        .WithMany("DailyExpenseAttachments")
                        .HasForeignKey("DailyExpenseId");

                    b.Navigation("DailyExpense");
                });

            modelBuilder.Entity("Focus.Domain.Entities.DailyExpenseDetail", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.DailyExpense", "DailyExpense")
                        .WithMany("DailyExpenseDetails")
                        .HasForeignKey("DailyExpenseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Account", "ExpenseAccount")
                        .WithMany("DailyExpenseDetails")
                        .HasForeignKey("ExpenseAccountId");

                    b.HasOne("Focus.Domain.Entities.TaxRate", "TaxRate")
                        .WithMany("DailyExpenseDetails")
                        .HasForeignKey("VatId");

                    b.Navigation("DailyExpense");

                    b.Navigation("ExpenseAccount");

                    b.Navigation("TaxRate");
                });

            modelBuilder.Entity("Focus.Domain.Entities.DayStart", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Focus.Domain.Entities.Deduction", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Focus.Domain.Entities.DeliveryAddress", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Contact", "Contact")
                        .WithMany("DeliveryAddresses")
                        .HasForeignKey("ContactId");

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("Focus.Domain.Entities.DeliveryChallan", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Contact", "Contact")
                        .WithMany("DeliveryChallans")
                        .HasForeignKey("CustomerId");

                    b.HasOne("Focus.Domain.Entities.Sale", "SaleInvoice")
                        .WithMany("DeliveryChallansForSales")
                        .HasForeignKey("SaleInvoiceId");

                    b.HasOne("Focus.Domain.Entities.SaleOrder", "SaleOrder")
                        .WithMany("DeliveryChallansForSaleOrders")
                        .HasForeignKey("SaleOrderId");

                    b.Navigation("Contact");

                    b.Navigation("SaleInvoice");

                    b.Navigation("SaleOrder");
                });

            modelBuilder.Entity("Focus.Domain.Entities.DeliveryChallanItem", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.DeliveryChallan", "DeliveryChallan")
                        .WithMany("DeliveryChallanItems")
                        .HasForeignKey("DeliveryChallanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Product", "Product")
                        .WithMany("DeliveryChallanItems")
                        .HasForeignKey("ProductId");

                    b.Navigation("DeliveryChallan");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Focus.Domain.Entities.DeliveryChallanReserved", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Sale", "SaleInvoice")
                        .WithMany()
                        .HasForeignKey("SaleInvoiceId");

                    b.Navigation("SaleInvoice");
                });

            modelBuilder.Entity("Focus.Domain.Entities.DeliveryChallanReserverdItem", b =>
                {
                    b.HasOne("Focus.Domain.Entities.DeliveryChallanReserved", "DeliveryChallanReserved")
                        .WithMany("DeliveryChallanReserverdItems")
                        .HasForeignKey("DeliveryChallanReservedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Product", "Product")
                        .WithMany("DeliveryChallanReserverdItems")
                        .HasForeignKey("ProductId");

                    b.Navigation("DeliveryChallanReserved");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Focus.Domain.Entities.DeliveryHoliday", b =>
                {
                    b.HasOne("Focus.Domain.Entities.DeliveryAddress", "DeliveryAddress")
                        .WithMany("DeliveryHolidays")
                        .HasForeignKey("DeliveryAddressId");

                    b.HasOne("Focus.Domain.Entities.WeekHoliday", "WeekHoliday")
                        .WithMany("DeliveryHolidays")
                        .HasForeignKey("WeekHolidayId");

                    b.Navigation("DeliveryAddress");

                    b.Navigation("WeekHoliday");
                });

            modelBuilder.Entity("Focus.Domain.Entities.DenominationSetup", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Focus.Domain.Entities.Department", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Bank", "Bank")
                        .WithMany("Departments")
                        .HasForeignKey("BankId");

                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Bank");
                });

            modelBuilder.Entity("Focus.Domain.Entities.Designation", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Focus.Domain.Entities.Discount", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Focus.Domain.Entities.DiscountSetup", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Focus.Domain.Entities.DispatchNote", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Contact", "Customer")
                        .WithMany("DispatchNotes")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.SaleOrder", "SaleOrder")
                        .WithMany("DispatchNotes")
                        .HasForeignKey("SaleOrderId");

                    b.Navigation("Customer");

                    b.Navigation("SaleOrder");
                });

            modelBuilder.Entity("Focus.Domain.Entities.DispatchNoteItem", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.DispatchNote", "DispatchNote")
                        .WithMany("DispatchNoteItems")
                        .HasForeignKey("DispatchNoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DispatchNote");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Focus.Domain.Entities.EmailConfiguration", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Focus.Domain.Entities.Employee", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Designation", "Designation")
                        .WithMany()
                        .HasForeignKey("DesignationId");

                    b.HasOne("Focus.Domain.Entities.Employee", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Focus.Domain.Entities.Zone", "Zone")
                        .WithMany("Employees")
                        .HasForeignKey("ZoneId");

                    b.Navigation("Designation");

                    b.Navigation("Parent");

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("Focus.Domain.Entities.EmployeeAttachment", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Attachment", "Attachment")
                        .WithMany("EmployeeAttachments")
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Employee", "Employee")
                        .WithMany("EmployeeAttachments")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attachment");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Focus.Domain.Entities.EmployeeDepartment", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Employee", "Employee")
                        .WithMany("EmployeeDepartments")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Focus.Domain.Entities.EmployeeRegistration", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Department", "Department")
                        .WithMany("EmployeeRegistrations")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("Focus.Domain.Entities.Designation", "Designation")
                        .WithMany("EmployeeRegistrations")
                        .HasForeignKey("DesignationId");

                    b.HasOne("Focus.Domain.Entities.Account", "EmployeeAccount")
                        .WithMany("EmployeeAccounts")
                        .HasForeignKey("EmployeeAccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Focus.Domain.Entities.Account", "PayableAccount")
                        .WithMany("EmployeePayableAccounts")
                        .HasForeignKey("PayableAccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Department");

                    b.Navigation("Designation");

                    b.Navigation("EmployeeAccount");

                    b.Navigation("PayableAccount");
                });

            modelBuilder.Entity("Focus.Domain.Entities.EmployeeRegistrationAttachment", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.EmployeeRegistration", "Employee")
                        .WithMany("EmployeeAttachments")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Focus.Domain.Entities.EmployeeSalary", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.EmployeeRegistration", "Employee")
                        .WithMany("EmployeeSalaries")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Focus.Domain.Entities.EmployeeSalaryDetail", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.EmployeeSalary", "EmployeeSalary")
                        .WithMany("EmployeeSalaryDetails")
                        .HasForeignKey("EmployeeSalaryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployeeSalary");
                });

            modelBuilder.Entity("Focus.Domain.Entities.ExpenseType", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Account", "Account")
                        .WithMany("ExpenseTypes")
                        .HasForeignKey("AccountId");

                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Focus.Domain.Entities.FinancialYearClosing", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Focus.Domain.Entities.FinancialYearClosingBalance", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Account", "Account")
                        .WithMany("FinancialYearClosingBalances")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.FinancialYearClosing", "FinancialYearClosing")
                        .WithMany("FinancialYearClosingBalances")
                        .HasForeignKey("FinancialYearClosingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("FinancialYearClosing");
                });

            modelBuilder.Entity("Focus.Domain.Entities.FinancialYearSetting", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Focus.Domain.Entities.GatePass", b =>
                {
                    b.HasOne("Focus.Domain.Entities.BatchProcessContractor", "BatchProcessContractor")
                        .WithMany("GatePasses")
                        .HasForeignKey("BatchProcessContractorId");

                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.EmployeeRegistration", "EmployeeRegistration")
                        .WithMany("GatePasses")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("Focus.Domain.Entities.ProductionBatch", "ProductionBatch")
                        .WithMany("GatePasses")
                        .HasForeignKey("ProductionBatchId");

                    b.Navigation("BatchProcessContractor");

                    b.Navigation("EmployeeRegistration");

                    b.Navigation("ProductionBatch");
                });

            modelBuilder.Entity("Focus.Domain.Entities.GatePassItem", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.GatePass", "GatePass")
                        .WithMany("GatePassItems")
                        .HasForeignKey("GatePassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GatePass");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Focus.Domain.Entities.GoodReceiveNote", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.PurchaseOrder", "PurchaseOrder")
                        .WithMany("GoodReceiveNotes")
                        .HasForeignKey("PurchaseOrderId");

                    b.HasOne("Focus.Domain.Entities.Contact", "Supplier")
                        .WithMany("GoodReceiveNotes")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PurchaseOrder");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Focus.Domain.Entities.GoodReceiveNoteItem", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.GoodReceiveNote", "GoodReceiveNote")
                        .WithMany("GoodReceiveNoteItems")
                        .HasForeignKey("GoodReceiveNoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("Focus.Domain.Entities.TaxRate", "TaxRate")
                        .WithMany("GoodReceiveNoteItems")
                        .HasForeignKey("TaxRateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GoodReceiveNote");

                    b.Navigation("Product");

                    b.Navigation("TaxRate");
                });

            modelBuilder.Entity("Focus.Domain.Entities.GuestedHoliday", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Holiday", "Holiday")
                        .WithMany("GuestedHolidays")
                        .HasForeignKey("HolidayId");

                    b.Navigation("Holiday");
                });

            modelBuilder.Entity("Focus.Domain.Entities.HoldSetup", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Focus.Domain.Entities.Holiday", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Focus.Domain.Entities.ImportExportItem", b =>
                {
                    b.HasOne("Focus.Domain.Entities.ImportExportType", "Carrier")
                        .WithMany("Carriers")
                        .HasForeignKey("CarrierId");

                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.ImportExportType", "PortOfDestination")
                        .WithMany("PortOfDestinations")
                        .HasForeignKey("PortOfDestinationId");

                    b.HasOne("Focus.Domain.Entities.ImportExportType", "PortOfLoading")
                        .WithMany("PortOfLoadings")
                        .HasForeignKey("PortOfLoadingId");

                    b.HasOne("Focus.Domain.Entities.SaleOrder", "SaleOrder")
                        .WithMany("ImportExportItems")
                        .HasForeignKey("SaleOrderId");

                    b.HasOne("Focus.Domain.Entities.ImportExportType", "Service")
                        .WithMany("Services")
                        .HasForeignKey("ServiceId");

                    b.HasOne("Focus.Domain.Entities.ImportExportType", "StuffingLocation")
                        .WithMany("StuffingLocations")
                        .HasForeignKey("StuffingLocationId");

                    b.Navigation("Carrier");

                    b.Navigation("PortOfDestination");

                    b.Navigation("PortOfLoading");

                    b.Navigation("SaleOrder");

                    b.Navigation("Service");

                    b.Navigation("StuffingLocation");
                });

            modelBuilder.Entity("Focus.Domain.Entities.ImportExportType", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Focus.Domain.Entities.Inquiry", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Contact", "Contact")
                        .WithMany("Inquiries")
                        .HasForeignKey("CustomerId");

                    b.HasOne("Focus.Domain.Entities.InquiryPriority", "InquiryPriority")
                        .WithMany("Inquiries")
                        .HasForeignKey("InquiryPriorityId");

                    b.HasOne("Focus.Domain.Entities.InquiryProcess", "InquiryProcess")
                        .WithMany("Inquiries")
                        .HasForeignKey("InquiryProcessId");

                    b.HasOne("Focus.Domain.Entities.InquiryStatusDynamic", "InquiryStatusDynamic")
                        .WithMany("Inquiries")
                        .HasForeignKey("InquiryStatusDynamicId");

                    b.HasOne("Focus.Domain.Entities.InquiryType", "InquiryType")
                        .WithMany("Inquiries")
                        .HasForeignKey("InquiryTypeId");

                    b.HasOne("Focus.Domain.Entities.MediaType", "MediaType")
                        .WithMany("Inquiries")
                        .HasForeignKey("MediaTypeId");

                    b.HasOne("Focus.Domain.Entities.EmployeeRegistration", "EmployeeRegistration")
                        .WithMany("Inquiries")
                        .HasForeignKey("ReferedBy");

                    b.Navigation("Contact");

                    b.Navigation("EmployeeRegistration");

                    b.Navigation("InquiryPriority");

                    b.Navigation("InquiryProcess");

                    b.Navigation("InquiryStatusDynamic");

                    b.Navigation("InquiryType");

                    b.Navigation("MediaType");
                });

            modelBuilder.Entity("Focus.Domain.Entities.InquiryComment", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Inquiry", "Inquiry")
                        .WithMany("InquiryComments")
                        .HasForeignKey("InquiryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.InquiryComment", "InquiryCommentParent")
                        .WithMany("InquiryCommentChild")
                        .HasForeignKey("ReplyCommentedId");

                    b.Navigation("Inquiry");

                    b.Navigation("InquiryCommentParent");
                });

            modelBuilder.Entity("Focus.Domain.Entities.InquiryEmail", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Inquiry", "Inquiry")
                        .WithMany("InquiryEmails")
                        .HasForeignKey("InquiryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inquiry");
                });

            modelBuilder.Entity("Focus.Domain.Entities.InquiryEmailCc", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.InquiryEmail", "InquiryEmail")
                        .WithMany("InquiryEmailCcs")
                        .HasForeignKey("InquiryEmailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InquiryEmail");
                });

            modelBuilder.Entity("Focus.Domain.Entities.InquiryItem", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Inquiry", "Inquiry")
                        .WithMany("InquiryItems")
                        .HasForeignKey("InquiryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Product", "Product")
                        .WithMany("InquiryItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inquiry");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Focus.Domain.Entities.InquiryMeeting", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Inquiry", "Inquiry")
                        .WithMany("InquiryMeetings")
                        .HasForeignKey("InquiryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inquiry");
                });

            modelBuilder.Entity("Focus.Domain.Entities.InquiryMeetingAttendant", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.EmployeeRegistration", "EmployeeRegistration")
                        .WithMany("InquiryMeetingAttendants")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.InquiryMeeting", "InquiryMeeting")
                        .WithMany("InquiryMeetingAttendants")
                        .HasForeignKey("MeetingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployeeRegistration");

                    b.Navigation("InquiryMeeting");
                });

            modelBuilder.Entity("Focus.Domain.Entities.InquiryModule", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Focus.Domain.Entities.InquiryModuleQuestion", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Inquiry", "Inquiry")
                        .WithMany("InquiryModuleQuestions")
                        .HasForeignKey("InquiryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.InquiryModule", "InquiryModule")
                        .WithMany("InquiryModuleQuestions")
                        .HasForeignKey("InquiryModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inquiry");

                    b.Navigation("InquiryModule");
                });

            modelBuilder.Entity("Focus.Domain.Entities.InquiryPriority", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Focus.Domain.Entities.InquiryProcess", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Focus.Domain.Entities.InquiryStatus", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Inquiry", "Inquiry")
                        .WithMany("InquiryStatus")
                        .HasForeignKey("InquiryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.InquiryStatusDynamic", "InquiryStatusDynamic")
                        .WithMany("InquiryStatus")
                        .HasForeignKey("InquiryStatusDynamicId");

                    b.Navigation("Inquiry");

                    b.Navigation("InquiryStatusDynamic");
                });

            modelBuilder.Entity("Focus.Domain.Entities.InquiryStatusDynamic", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Focus.Domain.Entities.InquiryType", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Focus.Domain.Entities.Inventory", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Product", "Product")
                        .WithMany("Inventories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Stock", "Stock")
                        .WithMany()
                        .HasForeignKey("StockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("Focus.Domain.Entities.InventoryBlind", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Warehouse", "Warehouse")
                        .WithMany("InventoryBlinds")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Focus.Domain.Entities.InventoryBlindDetail", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.InventoryBlind", "InventoryBlind")
                        .WithMany("InventoryBlindDetails")
                        .HasForeignKey("InventoryBlindId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Product", "Product")
                        .WithMany("InventoryBlindDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("InventoryBlind");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Focus.Domain.Entities.InvoiceDefault", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Focus.Domain.Entities.IssuedTo", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Focus.Domain.Entities.ItemsListDisplayOrderSetup", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Focus.Domain.Entities.ItemViewSetup", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Focus.Domain.Entities.ItemViewSetupForPrint", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Focus.Domain.Entities.JournalVoucher", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Focus.Domain.Entities.JournalVoucherAttachment", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.JournalVoucher", "JournalVoucher")
                        .WithMany("JournalVoucherAttachments")
                        .HasForeignKey("JournalVoucherId");

                    b.Navigation("JournalVoucher");
                });

            modelBuilder.Entity("Focus.Domain.Entities.JournalVoucherItem", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Account", "Account")
                        .WithMany("JournalVoucherItems")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Contact", "Contact")
                        .WithMany("JournalVoucherItems")
                        .HasForeignKey("ContactId");

                    b.HasOne("Focus.Domain.Entities.JournalVoucher", "JournalVoucher")
                        .WithMany("JournalVoucherItems")
                        .HasForeignKey("JournalVoucherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Contact");

                    b.Navigation("JournalVoucher");
                });

            modelBuilder.Entity("Focus.Domain.Entities.LeaveGroup", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Focus.Domain.Entities.LeaveGroupEmployee", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.EmployeeRegistration", "EmployeeRegistration")
                        .WithMany("LeaveGroupEmployees")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("Focus.Domain.Entities.LeaveGroup", "LeaveGroups")
                        .WithMany("LeaveGroupEmployees")
                        .HasForeignKey("LeaveGroupId");

                    b.Navigation("EmployeeRegistration");

                    b.Navigation("LeaveGroups");
                });

            modelBuilder.Entity("Focus.Domain.Entities.LeaveHoliday", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Focus.Domain.Entities.LeavePeriod", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Focus.Domain.Entities.LeaveRules", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Department", "Departments")
                        .WithMany("LeaveRules")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("Focus.Domain.Entities.Designation", "Designations")
                        .WithMany("LeaveRules")
                        .HasForeignKey("DesignationId");

                    b.HasOne("Focus.Domain.Entities.EmployeeRegistration", "EmployeeRegistration")
                        .WithMany("LeaveRules")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("Focus.Domain.Entities.LeaveGroup", "LeaveGroups")
                        .WithMany("LeaveRules")
                        .HasForeignKey("LeaveGroupId");

                    b.HasOne("Focus.Domain.Entities.LeavePeriod", "LeavePeriods")
                        .WithMany("LeaveRules")
                        .HasForeignKey("LeavePeriodId");

                    b.HasOne("Focus.Domain.Entities.LeaveTypes", "LeaveTypes")
                        .WithMany("LeaveRules")
                        .HasForeignKey("LeaveTypeId");

                    b.Navigation("Departments");

                    b.Navigation("Designations");

                    b.Navigation("EmployeeRegistration");

                    b.Navigation("LeaveGroups");

                    b.Navigation("LeavePeriods");

                    b.Navigation("LeaveTypes");
                });

            modelBuilder.Entity("Focus.Domain.Entities.LeaveTypes", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.LeaveGroup", "LeaveGroups")
                        .WithMany("LeaveTypes")
                        .HasForeignKey("LeaveGroupId");

                    b.Navigation("LeaveGroups");
                });

            modelBuilder.Entity("Focus.Domain.Entities.LedgerAccount", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Account", "Account")
                        .WithMany("LeadgerAccounts")
                        .HasForeignKey("AccountId");

                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Focus.Domain.Entities.LedgerTransaction", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Focus.Domain.Entities.ListOrderSetup", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Focus.Domain.Entities.LoanPay", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.LoanPayment", "LoanPayment")
                        .WithMany("LoanPays")
                        .HasForeignKey("LoanPaymentId");

                    b.Navigation("LoanPayment");
                });

            modelBuilder.Entity("Focus.Domain.Entities.LoanPayment", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.EmployeeRegistration", "EmployeeRegistration")
                        .WithMany("LoanPayments")
                        .HasForeignKey("EmployeeRegistrationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployeeRegistration");
                });

            modelBuilder.Entity("Focus.Domain.Entities.LoginPermissions", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Focus.Domain.Entities.Logistic", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Account", "Account")
                        .WithMany("Logistics")
                        .HasForeignKey("ClearanceAgent");

                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Focus.Domain.Entities.ManualAttendance", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.EmployeeRegistration", "EmployeeRegistration")
                        .WithMany("ManualAttendances")
                        .HasForeignKey("EmployeeId");

                    b.Navigation("EmployeeRegistration");
                });

            modelBuilder.Entity("Focus.Domain.Entities.MediaType", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Focus.Domain.Entities.MobileOrder", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Focus.Domain.Entities.MobileOrderItem", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.MobileOrder", "MobileOrder")
                        .WithMany("MobileOrderItems")
                        .HasForeignKey("MobileOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Product", "Product")
                        .WithMany("MobileOrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MobileOrder");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Focus.Domain.Entities.ModuleQuestion", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.InquiryModule", "InquiryModule")
                        .WithMany("ModuleQuestions")
                        .HasForeignKey("InquiryModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InquiryModule");
                });

            modelBuilder.Entity("Focus.Domain.Entities.ModulesRights", b =>
                {
                    b.HasOne("Focus.Domain.Entities.ModulesName", "ModulesNames")
                        .WithMany("ModulesRights")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ModulesNames");
                });

            modelBuilder.Entity("Focus.Domain.Entities.MonthlyCost", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Focus.Domain.Entities.MonthlyCostItem", b =>
                {
                    b.HasOne("Focus.Domain.Entities.MonthlyCost", "MonthlyCost")
                        .WithMany("MonthlyCostItems")
                        .HasForeignKey("MonthlyCostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MonthlyCost");
                });

            modelBuilder.Entity("Focus.Domain.Entities.MultiUp", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Contact", "Customer")
                        .WithMany("MultiUps")
                        .HasForeignKey("CustomerId");

                    b.HasOne("Focus.Domain.Entities.EmployeeRegistration", "Employee")
                        .WithMany("MultiUps")
                        .HasForeignKey("EmployeeId");

                    b.Navigation("Customer");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Focus.Domain.Entities.MultiUPSLineItem", b =>
                {
                    b.HasOne("Focus.Domain.Entities.ReparingOrderType", "AcessoryInclude")
                        .WithMany("MultiAcessoryIncludes")
                        .HasForeignKey("AcessoryIncludedId");

                    b.HasOne("Focus.Domain.Entities.MultiUp", "MultiUp")
                        .WithMany("MultiUPSLineItems")
                        .HasForeignKey("MultiUpId");

                    b.HasOne("Focus.Domain.Entities.ReparingOrderType", "Problem")
                        .WithMany("MultiProblems")
                        .HasForeignKey("ProblemId");

                    b.HasOne("Focus.Domain.Entities.ReparingOrderType", "UpsDescription")
                        .WithMany("MultiUpsDescriptions")
                        .HasForeignKey("UpsDescriptionId");

                    b.HasOne("Focus.Domain.Entities.ReparingOrderType", "WarrantyCategory")
                        .WithMany("MultiWarrantyCategories")
                        .HasForeignKey("WarrantyCategoryId");

                    b.Navigation("AcessoryInclude");

                    b.Navigation("MultiUp");

                    b.Navigation("Problem");

                    b.Navigation("UpsDescription");

                    b.Navigation("WarrantyCategory");
                });

            modelBuilder.Entity("Focus.Domain.Entities.NobleGroup", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Focus.Domain.Entities.NobleModule", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Focus.Domain.Entities.NoblePermission", b =>
                {
                    b.HasOne("Focus.Domain.Entities.NobleModule", "NobleModules")
                        .WithMany("NoblePermissions")
                        .HasForeignKey("NobleModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NobleModules");
                });

            modelBuilder.Entity("Focus.Domain.Entities.NobleRolePermission", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.CompanyPermission", "CompanyPermissions")
                        .WithMany("NobleRolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.NobleRoles", "NobleRole")
                        .WithMany("NobleRolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CompanyPermissions");

                    b.Navigation("NobleRole");
                });

            modelBuilder.Entity("Focus.Domain.Entities.NobleRoles", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Focus.Domain.Entities.NobleUserRoles", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.NobleRoles", "Roles")
                        .WithMany("NobleUserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("Focus.Domain.Entities.Origin", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Focus.Domain.Entities.OtherCurrency", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Currency", "Currency")
                        .WithMany("OtherCurrencies")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("Focus.Domain.Entities.PaidTimeOff", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.EmployeeRegistration", "EmployeeRegistration")
                        .WithMany("PaidLeaveOffs")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("Focus.Domain.Entities.LeavePeriod", "LeavePeriods")
                        .WithMany("PaidLeaveOffs")
                        .HasForeignKey("LeavePeriodId");

                    b.HasOne("Focus.Domain.Entities.LeaveTypes", "LeaveTypes")
                        .WithMany("PaidLeaveOffs")
                        .HasForeignKey("LeaveType");

                    b.Navigation("EmployeeRegistration");

                    b.Navigation("LeavePeriods");

                    b.Navigation("LeaveTypes");
                });

            modelBuilder.Entity("Focus.Domain.Entities.PaymentLimit", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Focus.Domain.Entities.PaymentOption", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Focus.Domain.Entities.PaymentRefund", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Account", "Account")
                        .WithMany("PaymentRefundBankCash")
                        .HasForeignKey("BankCashAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Account", "ContactAccount")
                        .WithMany("PaymentRefundContact")
                        .HasForeignKey("ContactAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.TaxRate", "TaxRate")
                        .WithMany("PaymentRefunds")
                        .HasForeignKey("TaxRateId");

                    b.Navigation("Account");

                    b.Navigation("ContactAccount");

                    b.Navigation("TaxRate");
                });

            modelBuilder.Entity("Focus.Domain.Entities.PaymentVoucher", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Account", "Account")
                        .WithMany("PaymentVoucherForBanks")
                        .HasForeignKey("BankCashAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.PurchaseBill", "Bills")
                        .WithMany("PaymentVouchers")
                        .HasForeignKey("BillsId");

                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Account", "ContactAccount")
                        .WithMany("PaymentVoucherForContacts")
                        .HasForeignKey("ContactAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.MultiUp", "MultiUp")
                        .WithMany("PaymentVouchers")
                        .HasForeignKey("MultiUpId");

                    b.HasOne("Focus.Domain.Entities.ReparingOrder", "ReparingOrder")
                        .WithMany("PaymentVouchers")
                        .HasForeignKey("ReparingOrderId");

                    b.HasOne("Focus.Domain.Entities.TaxRate", "TaxRate")
                        .WithMany("PaymentVouchers")
                        .HasForeignKey("TaxRateId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Focus.Domain.Entities.Account", "VatAccount")
                        .WithMany("PaymentVoucherForVat")
                        .HasForeignKey("VatAccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Account");

                    b.Navigation("Bills");

                    b.Navigation("ContactAccount");

                    b.Navigation("MultiUp");

                    b.Navigation("ReparingOrder");

                    b.Navigation("TaxRate");

                    b.Navigation("VatAccount");
                });

            modelBuilder.Entity("Focus.Domain.Entities.PaymentVoucherAttachment", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.PaymentVoucher", "PaymentVoucher")
                        .WithMany("PaymentVoucherAttachments")
                        .HasForeignKey("PaymentVoucherId");

                    b.HasOne("Focus.Domain.Entities.PurchaseOrderExpense", "PurchaseOrderExpense")
                        .WithMany("PaymentVoucherAttachments")
                        .HasForeignKey("PurchaseOrderExpenseId");

                    b.Navigation("PaymentVoucher");

                    b.Navigation("PurchaseOrderExpense");
                });

            modelBuilder.Entity("Focus.Domain.Entities.PaymentVoucherDetail", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.PaymentVoucher", "PaymentVouchers")
                        .WithMany()
                        .HasForeignKey("PaymentVoucherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("PaymentVouchers");
                });

            modelBuilder.Entity("Focus.Domain.Entities.PaymentVoucherItem", b =>
                {
                    b.HasOne("Focus.Domain.Entities.PaymentVoucher", "PaymentVouchers")
                        .WithMany("PaymentVoucherItems")
                        .HasForeignKey("PaymentVoucherId");

                    b.Navigation("PaymentVouchers");
                });

            modelBuilder.Entity("Focus.Domain.Entities.PaySchedule", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Focus.Domain.Entities.PermanentDeleteHoldSetup", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Focus.Domain.Entities.Prefixies", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Focus.Domain.Entities.PriceLabeling", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Focus.Domain.Entities.PriceRecord", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.PriceLabeling", "PriceLabeling")
                        .WithMany("PriceRecords")
                        .HasForeignKey("PriceLabelingId");

                    b.HasOne("Focus.Domain.Entities.Product", "Product")
                        .WithMany("PriceRecords")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PriceLabeling");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Focus.Domain.Entities.PrintOption", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.PrintSetting", "PrintSetting")
                        .WithMany("PrintOptions")
                        .HasForeignKey("PrintSettingId");

                    b.Navigation("PrintSetting");
                });

            modelBuilder.Entity("Focus.Domain.Entities.PrintSetting", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Bank", "Bank1")
                        .WithMany("Banks1")
                        .HasForeignKey("Bank1Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Focus.Domain.Entities.Bank", "Bank2")
                        .WithMany("Banks2")
                        .HasForeignKey("Bank2Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Focus.Domain.Entities.Account", "Account")
                        .WithMany("BankAccountPrintSetting")
                        .HasForeignKey("BankAccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Focus.Domain.Entities.Account", "CashAccount")
                        .WithMany("CashAccountPrintSetting")
                        .HasForeignKey("CashAccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Bank1");

                    b.Navigation("Bank2");

                    b.Navigation("CashAccount");
                });

            modelBuilder.Entity("Focus.Domain.Entities.Process", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Focus.Domain.Entities.ProcessContractor", b =>
                {
                    b.HasOne("Focus.Domain.Entities.EmployeeRegistration", "Contractor")
                        .WithMany("ProcessContractors")
                        .HasForeignKey("ContractorId");

                    b.HasOne("Focus.Domain.Entities.Contractor", null)
                        .WithMany("ProcessContractors")
                        .HasForeignKey("ContractorId2");

                    b.HasOne("Focus.Domain.Entities.Process", "Process")
                        .WithMany("ProcessContractors")
                        .HasForeignKey("ProcessId");

                    b.Navigation("Contractor");

                    b.Navigation("Process");
                });

            modelBuilder.Entity("Focus.Domain.Entities.ProcessItem", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Process", "Process")
                        .WithMany("ProcessItems")
                        .HasForeignKey("ProcessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Product", "Product")
                        .WithMany("ProcessItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Process");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Focus.Domain.Entities.Product", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId");

                    b.HasOne("Focus.Domain.Entities.BundleCategory", "BundleCategory")
                        .WithMany("Products")
                        .HasForeignKey("BundleCategoryId");

                    b.HasOne("Focus.Domain.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Color", "Color")
                        .WithMany("Products")
                        .HasForeignKey("ColorId");

                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Origin", "Origin")
                        .WithMany("Products")
                        .HasForeignKey("OriginId");

                    b.HasOne("Focus.Domain.Entities.ProductGroup", "ProductGroup")
                        .WithMany("Products")
                        .HasForeignKey("ProductGroupId");

                    b.HasOne("Focus.Domain.Entities.ProductMaster", "ProductMaster")
                        .WithMany("Products")
                        .HasForeignKey("ProductMasterId");

                    b.HasOne("Focus.Domain.Entities.PromotionOffer", "PromotionOffer")
                        .WithMany("Products")
                        .HasForeignKey("PromotionOfferId");

                    b.HasOne("Focus.Domain.Entities.Size", "Size")
                        .WithMany("Products")
                        .HasForeignKey("SizeId");

                    b.HasOne("Focus.Domain.Entities.TaxRate", "TaxRate")
                        .WithMany("Products")
                        .HasForeignKey("TaxRateId");

                    b.HasOne("Focus.Domain.Entities.Unit", "Unit")
                        .WithMany("Products")
                        .HasForeignKey("UnitId");

                    b.Navigation("Brand");

                    b.Navigation("BundleCategory");

                    b.Navigation("Category");

                    b.Navigation("Color");

                    b.Navigation("Origin");

                    b.Navigation("ProductGroup");

                    b.Navigation("ProductMaster");

                    b.Navigation("PromotionOffer");

                    b.Navigation("Size");

                    b.Navigation("TaxRate");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Focus.Domain.Entities.ProductGroup", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Focus.Domain.Entities.ProductionBatch", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.EmployeeRegistration", "EmployeeRegistration")
                        .WithMany("ProductionBatchs")
                        .HasForeignKey("EmployeeRegistrationId");

                    b.HasOne("Focus.Domain.Entities.RecipeNo", "RecipeNo")
                        .WithMany("ProductionBatchs")
                        .HasForeignKey("RecipeNoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.SaleOrder", "SaleOrder")
                        .WithMany("ProductionBatchs")
                        .HasForeignKey("SaleOrderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("EmployeeRegistration");

                    b.Navigation("RecipeNo");

                    b.Navigation("SaleOrder");
                });

            modelBuilder.Entity("Focus.Domain.Entities.ProductionBatchItem", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.ProductionBatch", "ProductionBatch")
                        .WithMany("ProductionBatchItems")
                        .HasForeignKey("ProductionBatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Warehouse", "Warehouse")
                        .WithMany("ProductionBatchItems")
                        .HasForeignKey("WarehouseId");

                    b.Navigation("Product");

                    b.Navigation("ProductionBatch");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Focus.Domain.Entities.ProductionStockTransfer", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Focus.Domain.Entities.ProductMaster", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Focus.Domain.Entities.ProductSize", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Product", "Products")
                        .WithMany("ProductSizes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Size", "Size")
                        .WithMany("ProductSizes")
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Products");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("Focus.Domain.Entities.PromotionOffer", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Product", "GetProduct")
                        .WithMany("GetPromotionOffers")
                        .HasForeignKey("GetProductId");

                    b.HasOne("Focus.Domain.Entities.ProductGroup", "ProductGroup")
                        .WithMany("PromotionOffers")
                        .HasForeignKey("ProductGroupId");

                    b.HasOne("Focus.Domain.Entities.Product", "Product")
                        .WithMany("PromotionOffers")
                        .HasForeignKey("ProductId");

                    b.Navigation("GetProduct");

                    b.Navigation("Product");

                    b.Navigation("ProductGroup");
                });

            modelBuilder.Entity("Focus.Domain.Entities.PromotionOfferItem", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Product", "GetProduct")
                        .WithMany("GetPromotionOfferItems")
                        .HasForeignKey("GetProductId");

                    b.HasOne("Focus.Domain.Entities.Product", "Product")
                        .WithMany("PromotionOfferItems")
                        .HasForeignKey("ProductId");

                    b.HasOne("Focus.Domain.Entities.PromotionOffer", "PromotionOffer")
                        .WithMany("PromotionOfferItems")
                        .HasForeignKey("PromotionOfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GetProduct");

                    b.Navigation("Product");

                    b.Navigation("PromotionOffer");
                });

            modelBuilder.Entity("Focus.Domain.Entities.Purchase", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.PurchaseOrder", "PurchaseOrder")
                        .WithMany("Purchases")
                        .HasForeignKey("PurchaseOrderId");

                    b.HasOne("Focus.Domain.Entities.Contact", "Supplier")
                        .WithMany("Purchases")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PurchaseOrder");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Focus.Domain.Entities.PurchaseAttachment", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.PurchaseOrder", "PurchaseOrder")
                        .WithMany("PurchaseAttachments")
                        .HasForeignKey("PurchaseOrderId");

                    b.Navigation("PurchaseOrder");
                });

            modelBuilder.Entity("Focus.Domain.Entities.PurchaseBill", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Account", "BillerAccount")
                        .WithMany("PurchaseBills")
                        .HasForeignKey("BillerId");

                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BillerAccount");
                });

            modelBuilder.Entity("Focus.Domain.Entities.PurchaseBillItem", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Account", "Account")
                        .WithMany("PurchaseBillItems")
                        .HasForeignKey("AccountId");

                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.PurchaseBill", "PurchaseBill")
                        .WithMany("PurchaseBillItems")
                        .HasForeignKey("PurchaseBillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("PurchaseBill");
                });

            modelBuilder.Entity("Focus.Domain.Entities.PurchaseInvoiceAction", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.CompanyProcess", "CompanyProcess")
                        .WithMany("PurchaseInvoiceActions")
                        .HasForeignKey("ProcessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Purchase", "Purchase")
                        .WithMany("PurchaseInvoiceActions")
                        .HasForeignKey("PurchaseInvoiceId");

                    b.HasOne("Focus.Domain.Entities.PurchasePost", "PurchasePost")
                        .WithMany("PurchaseInvoiceActions")
                        .HasForeignKey("PurchaseInvoicePostId");

                    b.Navigation("CompanyProcess");

                    b.Navigation("Purchase");

                    b.Navigation("PurchasePost");
                });

            modelBuilder.Entity("Focus.Domain.Entities.PurchaseInvoiceAttachment", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Purchase", "Purchase")
                        .WithMany("PurchaseInvoiceAttachments")
                        .HasForeignKey("PurchaseInvoiceId");

                    b.HasOne("Focus.Domain.Entities.PurchasePost", "PurchasePost")
                        .WithMany("PurchaseInvoiceAttachments")
                        .HasForeignKey("PurchaseInvoicePostId");

                    b.Navigation("Purchase");

                    b.Navigation("PurchasePost");
                });

            modelBuilder.Entity("Focus.Domain.Entities.PurchaseItem", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Product", "Product")
                        .WithMany("PurchaseItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Purchase", "Purchase")
                        .WithMany("PurchaseItems")
                        .HasForeignKey("PurchaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.TaxRate", "TaxRate")
                        .WithMany("PurchaseItems")
                        .HasForeignKey("TaxRateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Warehouse", "WareHouse")
                        .WithMany("PurchaseItems")
                        .HasForeignKey("WareHouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Purchase");

                    b.Navigation("TaxRate");

                    b.Navigation("WareHouse");
                });

            modelBuilder.Entity("Focus.Domain.Entities.PurchaseOrder", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Contact", "Supplier")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Focus.Domain.Entities.PurchaseOrderAction", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.CompanyProcess", "CompanyProcess")
                        .WithMany("PurchaseOrderActions")
                        .HasForeignKey("ProcessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.PurchaseOrder", "PurchaseOrder")
                        .WithMany("PurchaseOrderActions")
                        .HasForeignKey("PurchaseOrderId");

                    b.Navigation("CompanyProcess");

                    b.Navigation("PurchaseOrder");
                });

            modelBuilder.Entity("Focus.Domain.Entities.PurchaseOrderExpense", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Account", "Account")
                        .WithMany("PurchaseOrderExpenseForBanks")
                        .HasForeignKey("BankCashAccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Focus.Domain.Entities.PurchaseBill", "PurchaseBill")
                        .WithMany("PurchaseOrderExpenses")
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Account", "ContactAccount")
                        .WithMany("PurchaseOrderExpenseForContacts")
                        .HasForeignKey("ContactAccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Focus.Domain.Entities.ExpenseType", "ExpenseType")
                        .WithMany("PurchaseOrderExpenses")
                        .HasForeignKey("ExpenseTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Focus.Domain.Entities.PaymentVoucher", "PaymentVoucher")
                        .WithMany()
                        .HasForeignKey("PaymentVoucherId");

                    b.HasOne("Focus.Domain.Entities.PurchaseOrder", "PurchaseOrder")
                        .WithMany("PurchaseOrderExpenses")
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Focus.Domain.Entities.TaxRate", "TaxRate")
                        .WithMany("PurchaseOrderExpenses")
                        .HasForeignKey("TaxRateId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Focus.Domain.Entities.Account", "VatAccount")
                        .WithMany("PurchaseOrderExpenseForVat")
                        .HasForeignKey("VatAccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Account");

                    b.Navigation("ContactAccount");

                    b.Navigation("ExpenseType");

                    b.Navigation("PaymentVoucher");

                    b.Navigation("PurchaseBill");

                    b.Navigation("PurchaseOrder");

                    b.Navigation("TaxRate");

                    b.Navigation("VatAccount");
                });

            modelBuilder.Entity("Focus.Domain.Entities.PurchaseOrderItem", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("Focus.Domain.Entities.PurchaseOrder", "PurchaseOrder")
                        .WithMany("PurchaseOrderItems")
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.PurchaseOrderVersion", "PurchaseOrderVersion")
                        .WithMany("PurchaseOrderItems")
                        .HasForeignKey("PurchaseOrderVersionId");

                    b.HasOne("Focus.Domain.Entities.TaxRate", "TaxRate")
                        .WithMany("PurchaseOrderItems")
                        .HasForeignKey("TaxRateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("PurchaseOrder");

                    b.Navigation("PurchaseOrderVersion");

                    b.Navigation("TaxRate");
                });

            modelBuilder.Entity("Focus.Domain.Entities.PurchaseOrderPayment", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.PaymentVoucher", "PaymentVoucher")
                        .WithMany("PurchaseOrderPayments")
                        .HasForeignKey("PaymentVoucherId");

                    b.HasOne("Focus.Domain.Entities.PurchaseOrder", "PurchaseOrder")
                        .WithMany("PurchaseOrderPayments")
                        .HasForeignKey("PurchaseOrderId");

                    b.Navigation("PaymentVoucher");

                    b.Navigation("PurchaseOrder");
                });

            modelBuilder.Entity("Focus.Domain.Entities.PurchaseOrderVersion", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.PurchaseOrder", "PurchaseOrder")
                        .WithMany("PurchaseOrderVersions")
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("PurchaseOrder");
                });

            modelBuilder.Entity("Focus.Domain.Entities.PurchasePost", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.GoodReceiveNote", "GoodReceiveNote")
                        .WithMany("PurchasePosts")
                        .HasForeignKey("GoodReceiveNoteId");

                    b.HasOne("Focus.Domain.Entities.PurchaseOrder", "PurchaseOrder")
                        .WithMany("PurchasePosts")
                        .HasForeignKey("PurchaseOrderId");

                    b.HasOne("Focus.Domain.Entities.Contact", "Supplier")
                        .WithMany("PurchasePosts")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GoodReceiveNote");

                    b.Navigation("PurchaseOrder");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Focus.Domain.Entities.PurchasePostExpense", b =>
                {
                    b.HasOne("Focus.Domain.Entities.PurchaseBill", "PurchaseBill")
                        .WithMany("PurchasePostExpenses")
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.PaymentVoucher", "PaymentVoucher")
                        .WithMany("PurchasePostExpenses")
                        .HasForeignKey("PaymentVoucherId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Focus.Domain.Entities.PurchasePost", "PurchasePost")
                        .WithMany("PurchasePostExpenses")
                        .HasForeignKey("PurchasePostId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Focus.Domain.Entities.TaxRate", "TaxRate")
                        .WithMany("PurchasePostExpenses")
                        .HasForeignKey("TaxRateId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("PaymentVoucher");

                    b.Navigation("PurchaseBill");

                    b.Navigation("PurchasePost");

                    b.Navigation("TaxRate");
                });

            modelBuilder.Entity("Focus.Domain.Entities.PurchasePostItem", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Color", "Color")
                        .WithMany("PurchasePostItems")
                        .HasForeignKey("ColorId");

                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Product", "Product")
                        .WithMany("PurchasePostItems")
                        .HasForeignKey("ProductId");

                    b.HasOne("Focus.Domain.Entities.PurchasePost", "PurchasePost")
                        .WithMany("PurchasePostItems")
                        .HasForeignKey("PurchasePostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.TaxRate", "TaxRate")
                        .WithMany("PurchasePostItems")
                        .HasForeignKey("TaxRateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Warehouse", "WareHouse")
                        .WithMany("GetPurchasePostItems")
                        .HasForeignKey("WareHouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.WarrantyType", "WarrantyType")
                        .WithMany("PurchasePostItems")
                        .HasForeignKey("WarrantyTypeId");

                    b.Navigation("Color");

                    b.Navigation("Product");

                    b.Navigation("PurchasePost");

                    b.Navigation("TaxRate");

                    b.Navigation("WareHouse");

                    b.Navigation("WarrantyType");
                });

            modelBuilder.Entity("Focus.Domain.Entities.QuotationTemplate", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Focus.Domain.Entities.QuotationTemplateItem", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Product", "Product")
                        .WithMany("QuotationTemplateItems")
                        .HasForeignKey("ProductId");

                    b.HasOne("Focus.Domain.Entities.QuotationTemplate", "QuotationTemplate")
                        .WithMany("QuotationTemplateItems")
                        .HasForeignKey("QuotationTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("QuotationTemplate");
                });

            modelBuilder.Entity("Focus.Domain.Entities.RecipeAssortment", b =>
                {
                    b.HasOne("Focus.Domain.Entities.RecipeNo", "RecipeNo")
                        .WithMany("RecipeAssortments")
                        .HasForeignKey("RecipeNoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RecipeNo");
                });

            modelBuilder.Entity("Focus.Domain.Entities.RecipeItem", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Product", "Product")
                        .WithMany("RecipeItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.RecipeNo", "RecipeNo")
                        .WithMany("RecipeItems")
                        .HasForeignKey("RecipeNoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Warehouse", "WareHouse")
                        .WithMany("RecipeItems")
                        .HasForeignKey("WareHouseId");

                    b.Navigation("Product");

                    b.Navigation("RecipeNo");

                    b.Navigation("WareHouse");
                });

            modelBuilder.Entity("Focus.Domain.Entities.RecipeNo", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Product", "Product")
                        .WithMany("RecipeNos")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.SampleRequest", "SampleRequest")
                        .WithMany("RecipeNos")
                        .HasForeignKey("SampleRequestId");

                    b.Navigation("Product");

                    b.Navigation("SampleRequest");
                });

            modelBuilder.Entity("Focus.Domain.Entities.Region", b =>
                {
                    b.HasOne("Focus.Domain.Entities.City", "City")
                        .WithMany("Regions")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Focus.Domain.Entities.ReparingItem", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Product", "Product")
                        .WithMany("ReparingItems")
                        .HasForeignKey("ProductId");

                    b.HasOne("Focus.Domain.Entities.ReparingOrder", "ReparingOrder")
                        .WithMany("ReparingItems")
                        .HasForeignKey("ReparingOrderId");

                    b.Navigation("Product");

                    b.Navigation("ReparingOrder");
                });

            modelBuilder.Entity("Focus.Domain.Entities.ReparingOrder", b =>
                {
                    b.HasOne("Focus.Domain.Entities.ReparingOrderType", "AcessoryInclude")
                        .WithMany("AcessoryIncludes")
                        .HasForeignKey("AcessoryIncludedId");

                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Contact", "Customer")
                        .WithMany("ReparingOrders")
                        .HasForeignKey("CustomerId");

                    b.HasOne("Focus.Domain.Entities.EmployeeRegistration", "Employee")
                        .WithMany("ReparingOrders")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("Focus.Domain.Entities.ReparingOrderType", "Problem")
                        .WithMany("Problems")
                        .HasForeignKey("ProblemId");

                    b.HasOne("Focus.Domain.Entities.ReparingOrderType", "UpsDescription")
                        .WithMany("UpsDescriptions")
                        .HasForeignKey("UpsDescriptionId");

                    b.HasOne("Focus.Domain.Entities.ReparingOrderType", "WarrantyCategory")
                        .WithMany("WarrantyCategories")
                        .HasForeignKey("WarrantyCategoryId");

                    b.Navigation("AcessoryInclude");

                    b.Navigation("Customer");

                    b.Navigation("Employee");

                    b.Navigation("Problem");

                    b.Navigation("UpsDescription");

                    b.Navigation("WarrantyCategory");
                });

            modelBuilder.Entity("Focus.Domain.Entities.ReparingOrderType", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Focus.Domain.Entities.RolesPermissions", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.NobleRoles", "Roles")
                        .WithMany("UsersPermission")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("Focus.Domain.Entities.RunPayroll", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.PaySchedule", "PaySchedule")
                        .WithMany("RunPayrolls")
                        .HasForeignKey("PayrollScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PaySchedule");
                });

            modelBuilder.Entity("Focus.Domain.Entities.RunPayrollDetail", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.RunPayroll", "RunPayroll")
                        .WithMany("RunPayrollDetails")
                        .HasForeignKey("RunPayrollId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RunPayroll");
                });

            modelBuilder.Entity("Focus.Domain.Entities.RunPayrollSalaryDetail", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.RunPayrollDetail", "RunPayrollDetail")
                        .WithMany("RunPayrollSalaryDetails")
                        .HasForeignKey("RunPayrollDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RunPayrollDetail");
                });

            modelBuilder.Entity("Focus.Domain.Entities.SalaryAllowance", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Allowance", "Allowance")
                        .WithMany("SalaryAllowances")
                        .HasForeignKey("AllowanceId");

                    b.HasOne("Focus.Domain.Entities.SalaryTemplate", "SalaryTemplate")
                        .WithMany("SalaryAllowances")
                        .HasForeignKey("SalaryTemplateId");

                    b.Navigation("Allowance");

                    b.Navigation("SalaryTemplate");
                });

            modelBuilder.Entity("Focus.Domain.Entities.SalaryContribution", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Contribution", "Contribution")
                        .WithMany("SalaryContributions")
                        .HasForeignKey("ContributionId");

                    b.HasOne("Focus.Domain.Entities.SalaryTemplate", "SalaryTemplate")
                        .WithMany("SalaryContributions")
                        .HasForeignKey("SalaryTemplateId");

                    b.Navigation("Contribution");

                    b.Navigation("SalaryTemplate");
                });

            modelBuilder.Entity("Focus.Domain.Entities.SalaryDeduction", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Deduction", "Deduction")
                        .WithMany("SalaryDeductions")
                        .HasForeignKey("DeductionId");

                    b.HasOne("Focus.Domain.Entities.SalaryTemplate", "SalaryTemplate")
                        .WithMany("SalaryDeductions")
                        .HasForeignKey("SalaryTemplateId");

                    b.Navigation("Deduction");

                    b.Navigation("SalaryTemplate");
                });

            modelBuilder.Entity("Focus.Domain.Entities.SalaryTaxSlab", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.TaxSalary", "TaxSalary")
                        .WithMany("SalaryTaxSlabs")
                        .HasForeignKey("TaxSalaryId");

                    b.Navigation("TaxSalary");
                });

            modelBuilder.Entity("Focus.Domain.Entities.SalaryTemplate", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Focus.Domain.Entities.Sale", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Region", "Area")
                        .WithMany("Sales")
                        .HasForeignKey("AreaId");

                    b.HasOne("Focus.Domain.Entities.CashCustomer", "CashCustomer")
                        .WithMany("Sales")
                        .HasForeignKey("CashCustomerId");

                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Contact", "Customer")
                        .WithMany("Sales")
                        .HasForeignKey("CustomerId");

                    b.HasOne("Focus.Domain.Entities.EmployeeRegistration", "Employee")
                        .WithMany("Sales")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("Focus.Domain.Entities.Logistic", "Logistic")
                        .WithMany("Sales")
                        .HasForeignKey("LogisticId");

                    b.HasOne("Focus.Domain.Entities.OtherCurrency", "OtherCurrency")
                        .WithOne("Sale")
                        .HasForeignKey("Focus.Domain.Entities.Sale", "OtherCurrencyId");

                    b.HasOne("Focus.Domain.Entities.SaleOrder", "Quotation")
                        .WithMany("QuotationSales")
                        .HasForeignKey("QuotationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Focus.Domain.Entities.SaleOrder", "SaleOrder")
                        .WithMany("Sales")
                        .HasForeignKey("SaleOrderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Focus.Domain.Entities.TaxRate", "TaxRate")
                        .WithMany("Sales")
                        .HasForeignKey("TaxRateId");

                    b.HasOne("Focus.Domain.Entities.TaxRate", "UnRegisteredVAT")
                        .WithMany("SaleUnRegisteredTaxes")
                        .HasForeignKey("UnRegisteredVatId");

                    b.Navigation("Area");

                    b.Navigation("CashCustomer");

                    b.Navigation("Customer");

                    b.Navigation("Employee");

                    b.Navigation("Logistic");

                    b.Navigation("OtherCurrency");

                    b.Navigation("Quotation");

                    b.Navigation("SaleOrder");

                    b.Navigation("TaxRate");

                    b.Navigation("UnRegisteredVAT");
                });

            modelBuilder.Entity("Focus.Domain.Entities.SaleInvoiceAdvancePayment", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Sale", "Sale")
                        .WithMany("SaleInvoiceAdvancePayments")
                        .HasForeignKey("SaleInvoiceId");

                    b.HasOne("Focus.Domain.Entities.SaleOrder", "SaleOrder")
                        .WithMany("SaleInvoiceAdvancePayments")
                        .HasForeignKey("SaleOrderId");

                    b.Navigation("Sale");

                    b.Navigation("SaleOrder");
                });

            modelBuilder.Entity("Focus.Domain.Entities.SaleInvoiceDiscount", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Discount", "Discount")
                        .WithMany("SaleInvoiceDiscounts")
                        .HasForeignKey("DiscountId");

                    b.HasOne("Focus.Domain.Entities.Sale", "Sale")
                        .WithMany("SaleInvoiceDiscounts")
                        .HasForeignKey("SaleId");

                    b.Navigation("Discount");

                    b.Navigation("Sale");
                });

            modelBuilder.Entity("Focus.Domain.Entities.SaleItem", b =>
                {
                    b.HasOne("Focus.Domain.Entities.BundleCategory", "Bundle")
                        .WithMany("SaleItems")
                        .HasForeignKey("BundleId");

                    b.HasOne("Focus.Domain.Entities.Color", "Color")
                        .WithMany("SaleItems")
                        .HasForeignKey("ColorId");

                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Product", "Product")
                        .WithMany("SaleItems")
                        .HasForeignKey("ProductId");

                    b.HasOne("Focus.Domain.Entities.PromotionOffer", "Promotion")
                        .WithMany("SaleItems")
                        .HasForeignKey("PromotionId");

                    b.HasOne("Focus.Domain.Entities.PromotionOfferItem", "PromotionOfferItem")
                        .WithMany("SaleItems")
                        .HasForeignKey("PromotionItemId");

                    b.HasOne("Focus.Domain.Entities.Sale", "Sale")
                        .WithMany("SaleItems")
                        .HasForeignKey("SaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.TaxRate", "TaxRate")
                        .WithMany("SaleItems")
                        .HasForeignKey("TaxRateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Warehouse", "WareHouse")
                        .WithMany("SaleItems")
                        .HasForeignKey("WareHouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bundle");

                    b.Navigation("Color");

                    b.Navigation("Product");

                    b.Navigation("Promotion");

                    b.Navigation("PromotionOfferItem");

                    b.Navigation("Sale");

                    b.Navigation("TaxRate");

                    b.Navigation("WareHouse");
                });

            modelBuilder.Entity("Focus.Domain.Entities.SaleOrder", b =>
                {
                    b.HasOne("Focus.Domain.Entities.ImportExportType", "Commodity")
                        .WithMany("Commodities")
                        .HasForeignKey("CommodityId");

                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Contact", "Customer")
                        .WithMany("SaleOrders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.ImportExportType", "Incoterms")
                        .WithMany("Incoterms")
                        .HasForeignKey("IncotermsId");

                    b.HasOne("Focus.Domain.Entities.Logistic", "Logistic")
                        .WithMany("SaleOrders")
                        .HasForeignKey("LogisticId");

                    b.HasOne("Focus.Domain.Entities.ImportExportType", "OrderType")
                        .WithMany("OrderTypes")
                        .HasForeignKey("OrderTypeId");

                    b.HasOne("Focus.Domain.Entities.TaxRate", "TaxRate")
                        .WithMany("SaleOrders")
                        .HasForeignKey("TaxRateId");

                    b.Navigation("Commodity");

                    b.Navigation("Customer");

                    b.Navigation("Incoterms");

                    b.Navigation("Logistic");

                    b.Navigation("OrderType");

                    b.Navigation("TaxRate");
                });

            modelBuilder.Entity("Focus.Domain.Entities.SaleOrderItem", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("Focus.Domain.Entities.SaleOrder", "SaleOrder")
                        .WithMany("SaleOrderItems")
                        .HasForeignKey("SaleOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.SaleOrderVersion", "SaleOrderVersion")
                        .WithMany("SaleOrderItems")
                        .HasForeignKey("SaleOrderVersionId");

                    b.HasOne("Focus.Domain.Entities.TaxRate", "TaxRate")
                        .WithMany("SaleOrderItems")
                        .HasForeignKey("TaxRateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Warehouse", "WareHouse")
                        .WithMany("SaleOrderItems")
                        .HasForeignKey("WareHouseId");

                    b.Navigation("Product");

                    b.Navigation("SaleOrder");

                    b.Navigation("SaleOrderVersion");

                    b.Navigation("TaxRate");

                    b.Navigation("WareHouse");
                });

            modelBuilder.Entity("Focus.Domain.Entities.SaleOrderPayment", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.PaymentVoucher", "PaymentVoucher")
                        .WithMany("SaleOrderPayments")
                        .HasForeignKey("PaymentVoucherId");

                    b.HasOne("Focus.Domain.Entities.SaleOrder", "SaleOrder")
                        .WithMany("SaleOrderPayments")
                        .HasForeignKey("SaleOrderId");

                    b.Navigation("PaymentVoucher");

                    b.Navigation("SaleOrder");
                });

            modelBuilder.Entity("Focus.Domain.Entities.SaleOrderVersion", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.SaleOrder", "SaleOrder")
                        .WithMany("SaleOrderVersions")
                        .HasForeignKey("SaleOrderId");

                    b.Navigation("SaleOrder");
                });

            modelBuilder.Entity("Focus.Domain.Entities.SalePayment", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.PaymentOption", "PaymentOption")
                        .WithMany("SalePayments")
                        .HasForeignKey("PaymentOptionId");

                    b.HasOne("Focus.Domain.Entities.Sale", "Sale")
                        .WithMany("SalePayments")
                        .HasForeignKey("SaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PaymentOption");

                    b.Navigation("Sale");
                });

            modelBuilder.Entity("Focus.Domain.Entities.SaleSizeAssortment", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.PurchasePostItem", "PurchasePostItem")
                        .WithMany("SaleSizeAssortments")
                        .HasForeignKey("PurchasePostItemId");

                    b.HasOne("Focus.Domain.Entities.Sale", null)
                        .WithMany("SaleSizeAssortments")
                        .HasForeignKey("SaleId");

                    b.HasOne("Focus.Domain.Entities.SaleItem", "SaleItem")
                        .WithMany("SaleSizeAssortments")
                        .HasForeignKey("SaleItemId");

                    b.HasOne("Focus.Domain.Entities.Size", "Size")
                        .WithMany("SaleSizeAssortments")
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PurchasePostItem");

                    b.Navigation("SaleItem");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("Focus.Domain.Entities.SampleRequest", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Contact", "Customer")
                        .WithMany("SampleRequests")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Product", "Product")
                        .WithMany("SampleRequests")
                        .HasForeignKey("ProductId");

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Focus.Domain.Entities.SampleRequestItem", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Product", "Product")
                        .WithMany("SampleRequestItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.SampleRequest", "SampleRequests")
                        .WithMany("SampleRequestItems")
                        .HasForeignKey("SampleRequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("SampleRequests");
                });

            modelBuilder.Entity("Focus.Domain.Entities.ShiftAssign", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.EmployeeRegistration", "Employee")
                        .WithMany("ShiftAssigns")
                        .HasForeignKey("EmployeeId");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Focus.Domain.Entities.ShiftEmployeeAssign", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.EmployeeRegistration", "Employee")
                        .WithMany("ShiftEmployeeAssigns")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("Focus.Domain.Entities.ShiftAssign", "ShiftAssign")
                        .WithMany("ShiftEmployeeAssigns")
                        .HasForeignKey("ShiftAssignId");

                    b.Navigation("Employee");

                    b.Navigation("ShiftAssign");
                });

            modelBuilder.Entity("Focus.Domain.Entities.ShiftRun", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.ShiftAssign", "ShiftAssign")
                        .WithMany("ShiftRuns")
                        .HasForeignKey("ShiftAssignId");

                    b.Navigation("ShiftAssign");
                });

            modelBuilder.Entity("Focus.Domain.Entities.ShiftRunEmployee", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.EmployeeRegistration", "Employee")
                        .WithMany("ShiftRunEmployees")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("Focus.Domain.Entities.ShiftRun", "ShiftRun")
                        .WithMany("ShiftRunEmployees")
                        .HasForeignKey("ShiftRunId");

                    b.Navigation("Employee");

                    b.Navigation("ShiftRun");
                });

            modelBuilder.Entity("Focus.Domain.Entities.Size", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Focus.Domain.Entities.Stock", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Product", "Product")
                        .WithMany("Stocks")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Warehouse", "Warehouse")
                        .WithMany("Stocks")
                        .HasForeignKey("WareHouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Focus.Domain.Entities.StockAdjustment", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.TaxRate", "TaxRate")
                        .WithMany("StockAdjustments")
                        .HasForeignKey("TaxRateId");

                    b.HasOne("Focus.Domain.Entities.Warehouse", "Warehouse")
                        .WithMany("StockAdjustments")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TaxRate");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Focus.Domain.Entities.StockAdjustmentDetail", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.StockAdjustment", "StockAdjustments")
                        .WithMany("StockAdjustmentDetails")
                        .HasForeignKey("StockAdjustmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Warehouse", "Warehouse")
                        .WithMany("StockAdjustmentDetails")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.WarrantyType", "WarrantyType")
                        .WithMany("StockAdjustmentDetails")
                        .HasForeignKey("WarrantyTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Product");

                    b.Navigation("StockAdjustments");

                    b.Navigation("Warehouse");

                    b.Navigation("WarrantyType");
                });

            modelBuilder.Entity("Focus.Domain.Entities.StockReceived", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.StockTransfer", "StockTransfer")
                        .WithMany("StockReceived")
                        .HasForeignKey("StockTransferId");

                    b.Navigation("StockTransfer");
                });

            modelBuilder.Entity("Focus.Domain.Entities.StockReceivedItems", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Product", "Product")
                        .WithMany("StockReceivedItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.StockReceived", "StockReceived")
                        .WithMany("StockReceivedItems")
                        .HasForeignKey("StockReceivedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("StockReceived");
                });

            modelBuilder.Entity("Focus.Domain.Entities.StockRequest", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Focus.Domain.Entities.StockRequestItems", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Product", "Product")
                        .WithMany("StockRequestItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.StockRequest", "StockRequests")
                        .WithMany("StockRequestItems")
                        .HasForeignKey("StockRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("StockRequests");
                });

            modelBuilder.Entity("Focus.Domain.Entities.StockTransfer", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.StockRequest", "StockRequest")
                        .WithMany("StockTransfer")
                        .HasForeignKey("StockRequestId");

                    b.Navigation("StockRequest");
                });

            modelBuilder.Entity("Focus.Domain.Entities.StockTransferItems", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Product", "Product")
                        .WithMany("StockTransferItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.StockTransfer", "StockTransfer")
                        .WithMany("StockTransferItems")
                        .HasForeignKey("StockTransferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("StockTransfer");
                });

            modelBuilder.Entity("Focus.Domain.Entities.SubCategory", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Category", "Category")
                        .WithMany("SubCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Focus.Domain.Entities.TaxRate", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Focus.Domain.Entities.TaxSalary", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Focus.Domain.Entities.TemporaryCashAllocation", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Account", "Account")
                        .WithMany("TemporaryCashAllocations")
                        .HasForeignKey("BankCashAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Focus.Domain.Entities.TemporaryCashIssue", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.TemporaryCashRequest", "TemporaryCashRequest")
                        .WithMany("TemporaryCashIssues")
                        .HasForeignKey("TemporaryCashRequestId");

                    b.Navigation("TemporaryCashRequest");
                });

            modelBuilder.Entity("Focus.Domain.Entities.TemporaryCashIssueExpense", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.TemporaryCashIssue", "TemporaryCashIssue")
                        .WithMany("TemporaryCashIssueExpenses")
                        .HasForeignKey("TemporaryCashIssueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TemporaryCashIssue");
                });

            modelBuilder.Entity("Focus.Domain.Entities.TemporaryCashIssueItem", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.TemporaryCashIssue", "TemporaryCashIssue")
                        .WithMany("TemporaryCashIssueItems")
                        .HasForeignKey("TemporaryCashIssueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TemporaryCashIssue");
                });

            modelBuilder.Entity("Focus.Domain.Entities.TemporaryCashRequest", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Focus.Domain.Entities.TemporaryCashRequestItem", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.TemporaryCashRequest", "TemporaryCashRequest")
                        .WithMany("TemporaryCashRequestItems")
                        .HasForeignKey("TemporaryCashRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TemporaryCashRequest");
                });

            modelBuilder.Entity("Focus.Domain.Entities.TemporaryCashReturn", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.TemporaryCashIssue", "TemporaryCashIssue")
                        .WithMany("TemporaryCashReturns")
                        .HasForeignKey("TemporaryCashIssueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TemporaryCashIssue");
                });

            modelBuilder.Entity("Focus.Domain.Entities.Terminal", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Account", "Account")
                        .WithMany("Terminals")
                        .HasForeignKey("AccountId");

                    b.HasOne("Focus.Domain.Entities.Account", "CashAccount")
                        .WithMany("CashAccountTerminals")
                        .HasForeignKey("CashAccountId");

                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.BankPosTerminal", "BankPosTerminal")
                        .WithMany("Terminals")
                        .HasForeignKey("PosTerminalId");

                    b.Navigation("Account");

                    b.Navigation("BankPosTerminal");

                    b.Navigation("CashAccount");
                });

            modelBuilder.Entity("Focus.Domain.Entities.TerminalCategory", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Category", "Category")
                        .WithMany("TerminalCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Terminal", "Terminal")
                        .WithMany("TerminalCategories")
                        .HasForeignKey("TerminalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Terminal");
                });

            modelBuilder.Entity("Focus.Domain.Entities.Transaction", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Account", "Account")
                        .WithMany("Transactions")
                        .HasForeignKey("AccountId");

                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.CompanySubmissionPeriod", "Period")
                        .WithMany("Transactions")
                        .HasForeignKey("PeriodId");

                    b.Navigation("Account");

                    b.Navigation("Period");
                });

            modelBuilder.Entity("Focus.Domain.Entities.TransactionApplicationLog", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", "Company")
                        .WithMany("TransactionApplicationLogs")
                        .HasForeignKey("LocationId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Focus.Domain.Entities.TransferHistory", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Focus.Domain.Entities.Transporter", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Focus.Domain.Entities.Unit", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Focus.Domain.Entities.UserDefineFlow", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Focus.Domain.Entities.UserLog", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Focus.Domain.Entities.UserTerminal", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Terminal", "Terminal")
                        .WithMany("UserTerminals")
                        .HasForeignKey("TerminalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Terminal");
                });

            modelBuilder.Entity("Focus.Domain.Entities.VariationInventory", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Focus.Domain.Entities.VariationInventoryForReporting", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Focus.Domain.Entities.Warehouse", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Focus.Domain.Entities.WareHouseTransfer", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Warehouse", "Warehouse")
                        .WithMany("WareHouseTransfers")
                        .HasForeignKey("ToWareHouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Focus.Domain.Entities.WareHouseTransferItem", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.Product", "Product")
                        .WithMany("WareHouseTransferItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Focus.Domain.Entities.WareHouseTransfer", "WareHouseTransfer")
                        .WithMany("WareHouseTransferItems")
                        .HasForeignKey("WareHouseTransferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("WareHouseTransfer");
                });

            modelBuilder.Entity("Focus.Domain.Entities.WarrantyType", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Focus.Domain.Entities.WeekHoliday", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Holiday", "Holiday")
                        .WithMany("WeekHolidays")
                        .HasForeignKey("HolidayId");

                    b.Navigation("Holiday");
                });

            modelBuilder.Entity("Focus.Domain.Entities.WorkWeek", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Focus.Domain.Entities.YearlyPeriod", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Focus.Domain.Entities.Zone", b =>
                {
                    b.HasOne("Focus.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Focus.Business.Users.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Focus.Business.Users.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Focus.Business.Users.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Focus.Business.Users.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Focus.Domain.Entities.Account", b =>
                {
                    b.Navigation("BankAccountPrintSetting");

                    b.Navigation("BankPosTerminals");

                    b.Navigation("Banks");

                    b.Navigation("BranchVoucherBankCash");

                    b.Navigation("BranchVoucherContact");

                    b.Navigation("COGSAccounts");

                    b.Navigation("CashAccountPrintSetting");

                    b.Navigation("CashAccountTerminals");

                    b.Navigation("ContactAdvanceAccount");

                    b.Navigation("ContactCashAccount");

                    b.Navigation("Contacts");

                    b.Navigation("DailyExpenseDetails");

                    b.Navigation("DailyExpenses");

                    b.Navigation("EmployeeAccounts");

                    b.Navigation("EmployeePayableAccounts");

                    b.Navigation("ExpenseTypes");

                    b.Navigation("FinancialYearClosingBalances");

                    b.Navigation("IncomeAccounts");

                    b.Navigation("InventoryAccounts");

                    b.Navigation("JournalVoucherItems");

                    b.Navigation("LeadgerAccounts");

                    b.Navigation("Logistics");

                    b.Navigation("PaymentRefundBankCash");

                    b.Navigation("PaymentRefundContact");

                    b.Navigation("PaymentVoucherForBanks");

                    b.Navigation("PaymentVoucherForContacts");

                    b.Navigation("PaymentVoucherForVat");

                    b.Navigation("PurchaseAccounts");

                    b.Navigation("PurchaseBillItems");

                    b.Navigation("PurchaseBills");

                    b.Navigation("PurchaseOrderExpenseForBanks");

                    b.Navigation("PurchaseOrderExpenseForContacts");

                    b.Navigation("PurchaseOrderExpenseForVat");

                    b.Navigation("SaleAccounts");

                    b.Navigation("TemporaryCashAllocations");

                    b.Navigation("Terminals");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Focus.Domain.Entities.AccountType", b =>
                {
                    b.Navigation("CostCenters");
                });

            modelBuilder.Entity("Focus.Domain.Entities.Allowance", b =>
                {
                    b.Navigation("SalaryAllowances");
                });

            modelBuilder.Entity("Focus.Domain.Entities.AllowanceType", b =>
                {
                    b.Navigation("Allowances");
                });

            modelBuilder.Entity("Focus.Domain.Entities.ApprovalSystem", b =>
                {
                    b.Navigation("ApprovalSystemEmployees");
                });

            modelBuilder.Entity("Focus.Domain.Entities.Attachment", b =>
                {
                    b.Navigation("EmployeeAttachments");
                });

            modelBuilder.Entity("Focus.Domain.Entities.AutoPurchaseTemplate", b =>
                {
                    b.Navigation("AutoPurchaseTemplateItems");
                });

            modelBuilder.Entity("Focus.Domain.Entities.Bank", b =>
                {
                    b.Navigation("Banks1");

                    b.Navigation("Banks2");

                    b.Navigation("ChequeBooks");

                    b.Navigation("Departments");
                });

            modelBuilder.Entity("Focus.Domain.Entities.BankPosTerminal", b =>
                {
                    b.Navigation("Terminals");
                });

            modelBuilder.Entity("Focus.Domain.Entities.BatchCosting", b =>
                {
                    b.Navigation("BatchCostingItems");
                });

            modelBuilder.Entity("Focus.Domain.Entities.BatchProcess", b =>
                {
                    b.Navigation("BatchProcessContractors");
                });

            modelBuilder.Entity("Focus.Domain.Entities.BatchProcessContractor", b =>
                {
                    b.Navigation("ContractorItems");

                    b.Navigation("ContractorPayments");

                    b.Navigation("GatePasses");
                });

            modelBuilder.Entity("Focus.Domain.Entities.Bom", b =>
                {
                    b.Navigation("BomSaleOrderItems");
                });

            modelBuilder.Entity("Focus.Domain.Entities.BomSaleOrderItems", b =>
                {
                    b.Navigation("BomRawProducts");
                });

            modelBuilder.Entity("Focus.Domain.Entities.Branch", b =>
                {
                    b.Navigation("BranchUsers");
                });

            modelBuilder.Entity("Focus.Domain.Entities.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Focus.Domain.Entities.BundleCategory", b =>
                {
                    b.Navigation("BundleOfferBranches");

                    b.Navigation("Products");

                    b.Navigation("SaleItems");
                });

            modelBuilder.Entity("Focus.Domain.Entities.CashCustomer", b =>
                {
                    b.Navigation("Sales");
                });

            modelBuilder.Entity("Focus.Domain.Entities.Category", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("SubCategories");

                    b.Navigation("TerminalCategories");
                });

            modelBuilder.Entity("Focus.Domain.Entities.ChequeBook", b =>
                {
                    b.Navigation("GetChequeBookItems");
                });

            modelBuilder.Entity("Focus.Domain.Entities.City", b =>
                {
                    b.Navigation("Regions");
                });

            modelBuilder.Entity("Focus.Domain.Entities.Color", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("PurchasePostItems");

                    b.Navigation("SaleItems");
                });

            modelBuilder.Entity("Focus.Domain.Entities.Company", b =>
                {
                    b.Navigation("CompanyAttachments");

                    b.Navigation("CompanyInformation");

                    b.Navigation("CompanyLicences");

                    b.Navigation("TransactionApplicationLogs");
                });

            modelBuilder.Entity("Focus.Domain.Entities.CompanyPermission", b =>
                {
                    b.Navigation("NobleRolePermissions");
                });

            modelBuilder.Entity("Focus.Domain.Entities.CompanyProcess", b =>
                {
                    b.Navigation("PurchaseInvoiceActions");

                    b.Navigation("PurchaseOrderActions");
                });

            modelBuilder.Entity("Focus.Domain.Entities.CompanySubmissionPeriod", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Focus.Domain.Entities.Contact", b =>
                {
                    b.Navigation("AutoPurchaseTemplates");

                    b.Navigation("ContactAttachments");

                    b.Navigation("ContactBankAccounts");

                    b.Navigation("ContactPersons");

                    b.Navigation("CreditNotes");

                    b.Navigation("DeliveryAddresses");

                    b.Navigation("DeliveryChallans");

                    b.Navigation("DispatchNotes");

                    b.Navigation("GoodReceiveNotes");

                    b.Navigation("Inquiries");

                    b.Navigation("JournalVoucherItems");

                    b.Navigation("MultiUps");

                    b.Navigation("PurchaseOrders");

                    b.Navigation("PurchasePosts");

                    b.Navigation("Purchases");

                    b.Navigation("ReparingOrders");

                    b.Navigation("SaleOrders");

                    b.Navigation("Sales");

                    b.Navigation("SampleRequests");
                });

            modelBuilder.Entity("Focus.Domain.Entities.Contractor", b =>
                {
                    b.Navigation("BatchProcessContractors");

                    b.Navigation("ProcessContractors");
                });

            modelBuilder.Entity("Focus.Domain.Entities.Contribution", b =>
                {
                    b.Navigation("SalaryContributions");
                });

            modelBuilder.Entity("Focus.Domain.Entities.CostCenter", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("Focus.Domain.Entities.CreditNote", b =>
                {
                    b.Navigation("CreditNoteItems");
                });

            modelBuilder.Entity("Focus.Domain.Entities.Currency", b =>
                {
                    b.Navigation("Banks");

                    b.Navigation("Contacts");

                    b.Navigation("OtherCurrencies");
                });

            modelBuilder.Entity("Focus.Domain.Entities.CustomerGroup", b =>
                {
                    b.Navigation("Contacts");
                });

            modelBuilder.Entity("Focus.Domain.Entities.DailyExpense", b =>
                {
                    b.Navigation("DailyExpenseAttachments");

                    b.Navigation("DailyExpenseDetails");
                });

            modelBuilder.Entity("Focus.Domain.Entities.Deduction", b =>
                {
                    b.Navigation("SalaryDeductions");
                });

            modelBuilder.Entity("Focus.Domain.Entities.DeliveryAddress", b =>
                {
                    b.Navigation("DeliveryHolidays");
                });

            modelBuilder.Entity("Focus.Domain.Entities.DeliveryChallan", b =>
                {
                    b.Navigation("DeliveryChallanItems");
                });

            modelBuilder.Entity("Focus.Domain.Entities.DeliveryChallanReserved", b =>
                {
                    b.Navigation("DeliveryChallanReserverdItems");
                });

            modelBuilder.Entity("Focus.Domain.Entities.Department", b =>
                {
                    b.Navigation("EmployeeRegistrations");

                    b.Navigation("LeaveRules");
                });

            modelBuilder.Entity("Focus.Domain.Entities.Designation", b =>
                {
                    b.Navigation("EmployeeRegistrations");

                    b.Navigation("LeaveRules");
                });

            modelBuilder.Entity("Focus.Domain.Entities.Discount", b =>
                {
                    b.Navigation("SaleInvoiceDiscounts");
                });

            modelBuilder.Entity("Focus.Domain.Entities.DispatchNote", b =>
                {
                    b.Navigation("DispatchNoteItems");
                });

            modelBuilder.Entity("Focus.Domain.Entities.Employee", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("EmployeeAttachments");

                    b.Navigation("EmployeeDepartments");
                });

            modelBuilder.Entity("Focus.Domain.Entities.EmployeeRegistration", b =>
                {
                    b.Navigation("ApprovalSystemEmployees");

                    b.Navigation("BatchProcessContractors");

                    b.Navigation("EmployeeAttachments");

                    b.Navigation("EmployeeSalaries");

                    b.Navigation("GatePasses");

                    b.Navigation("Inquiries");

                    b.Navigation("InquiryMeetingAttendants");

                    b.Navigation("LeaveGroupEmployees");

                    b.Navigation("LeaveRules");

                    b.Navigation("LoanPayments");

                    b.Navigation("ManualAttendances");

                    b.Navigation("MultiUps");

                    b.Navigation("PaidLeaveOffs");

                    b.Navigation("ProcessContractors");

                    b.Navigation("ProductionBatchs");

                    b.Navigation("ReparingOrders");

                    b.Navigation("Sales");

                    b.Navigation("ShiftAssigns");

                    b.Navigation("ShiftEmployeeAssigns");

                    b.Navigation("ShiftRunEmployees");
                });

            modelBuilder.Entity("Focus.Domain.Entities.EmployeeSalary", b =>
                {
                    b.Navigation("EmployeeSalaryDetails");
                });

            modelBuilder.Entity("Focus.Domain.Entities.ExpenseType", b =>
                {
                    b.Navigation("PurchaseOrderExpenses");
                });

            modelBuilder.Entity("Focus.Domain.Entities.FinancialYearClosing", b =>
                {
                    b.Navigation("FinancialYearClosingBalances");
                });

            modelBuilder.Entity("Focus.Domain.Entities.GatePass", b =>
                {
                    b.Navigation("GatePassItems");
                });

            modelBuilder.Entity("Focus.Domain.Entities.GoodReceiveNote", b =>
                {
                    b.Navigation("GoodReceiveNoteItems");

                    b.Navigation("PurchasePosts");
                });

            modelBuilder.Entity("Focus.Domain.Entities.Holiday", b =>
                {
                    b.Navigation("GuestedHolidays");

                    b.Navigation("WeekHolidays");
                });

            modelBuilder.Entity("Focus.Domain.Entities.ImportExportType", b =>
                {
                    b.Navigation("Carriers");

                    b.Navigation("Commodities");

                    b.Navigation("Incoterms");

                    b.Navigation("OrderTypes");

                    b.Navigation("PortOfDestinations");

                    b.Navigation("PortOfLoadings");

                    b.Navigation("Services");

                    b.Navigation("StuffingLocations");
                });

            modelBuilder.Entity("Focus.Domain.Entities.Inquiry", b =>
                {
                    b.Navigation("InquiryComments");

                    b.Navigation("InquiryEmails");

                    b.Navigation("InquiryItems");

                    b.Navigation("InquiryMeetings");

                    b.Navigation("InquiryModuleQuestions");

                    b.Navigation("InquiryStatus");
                });

            modelBuilder.Entity("Focus.Domain.Entities.InquiryComment", b =>
                {
                    b.Navigation("InquiryCommentChild");
                });

            modelBuilder.Entity("Focus.Domain.Entities.InquiryEmail", b =>
                {
                    b.Navigation("InquiryEmailCcs");
                });

            modelBuilder.Entity("Focus.Domain.Entities.InquiryMeeting", b =>
                {
                    b.Navigation("InquiryMeetingAttendants");
                });

            modelBuilder.Entity("Focus.Domain.Entities.InquiryModule", b =>
                {
                    b.Navigation("InquiryModuleQuestions");

                    b.Navigation("ModuleQuestions");
                });

            modelBuilder.Entity("Focus.Domain.Entities.InquiryPriority", b =>
                {
                    b.Navigation("Inquiries");
                });

            modelBuilder.Entity("Focus.Domain.Entities.InquiryProcess", b =>
                {
                    b.Navigation("Inquiries");
                });

            modelBuilder.Entity("Focus.Domain.Entities.InquiryStatusDynamic", b =>
                {
                    b.Navigation("Inquiries");

                    b.Navigation("InquiryStatus");
                });

            modelBuilder.Entity("Focus.Domain.Entities.InquiryType", b =>
                {
                    b.Navigation("Inquiries");
                });

            modelBuilder.Entity("Focus.Domain.Entities.InventoryBlind", b =>
                {
                    b.Navigation("InventoryBlindDetails");
                });

            modelBuilder.Entity("Focus.Domain.Entities.JournalVoucher", b =>
                {
                    b.Navigation("JournalVoucherAttachments");

                    b.Navigation("JournalVoucherItems");
                });

            modelBuilder.Entity("Focus.Domain.Entities.LeaveGroup", b =>
                {
                    b.Navigation("LeaveGroupEmployees");

                    b.Navigation("LeaveRules");

                    b.Navigation("LeaveTypes");
                });

            modelBuilder.Entity("Focus.Domain.Entities.LeavePeriod", b =>
                {
                    b.Navigation("LeaveRules");

                    b.Navigation("PaidLeaveOffs");
                });

            modelBuilder.Entity("Focus.Domain.Entities.LeaveTypes", b =>
                {
                    b.Navigation("LeaveRules");

                    b.Navigation("PaidLeaveOffs");
                });

            modelBuilder.Entity("Focus.Domain.Entities.LoanPayment", b =>
                {
                    b.Navigation("LoanPays");
                });

            modelBuilder.Entity("Focus.Domain.Entities.Logistic", b =>
                {
                    b.Navigation("SaleOrders");

                    b.Navigation("Sales");
                });

            modelBuilder.Entity("Focus.Domain.Entities.MediaType", b =>
                {
                    b.Navigation("Inquiries");
                });

            modelBuilder.Entity("Focus.Domain.Entities.MobileOrder", b =>
                {
                    b.Navigation("MobileOrderItems");
                });

            modelBuilder.Entity("Focus.Domain.Entities.ModulesName", b =>
                {
                    b.Navigation("ModulesRights");
                });

            modelBuilder.Entity("Focus.Domain.Entities.MonthlyCost", b =>
                {
                    b.Navigation("MonthlyCostItems");
                });

            modelBuilder.Entity("Focus.Domain.Entities.MultiUp", b =>
                {
                    b.Navigation("MultiUPSLineItems");

                    b.Navigation("PaymentVouchers");
                });

            modelBuilder.Entity("Focus.Domain.Entities.NobleGroup", b =>
                {
                    b.Navigation("CompanyPermissions");
                });

            modelBuilder.Entity("Focus.Domain.Entities.NobleModule", b =>
                {
                    b.Navigation("CompanyPermissions");

                    b.Navigation("NoblePermissions");
                });

            modelBuilder.Entity("Focus.Domain.Entities.NobleRoles", b =>
                {
                    b.Navigation("NobleRolePermissions");

                    b.Navigation("NobleUserRoles");

                    b.Navigation("UsersPermission");
                });

            modelBuilder.Entity("Focus.Domain.Entities.Origin", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Focus.Domain.Entities.OtherCurrency", b =>
                {
                    b.Navigation("Sale");
                });

            modelBuilder.Entity("Focus.Domain.Entities.PaymentOption", b =>
                {
                    b.Navigation("SalePayments");
                });

            modelBuilder.Entity("Focus.Domain.Entities.PaymentVoucher", b =>
                {
                    b.Navigation("ContractorPayments");

                    b.Navigation("PaymentVoucherAttachments");

                    b.Navigation("PaymentVoucherItems");

                    b.Navigation("PurchaseOrderPayments");

                    b.Navigation("PurchasePostExpenses");

                    b.Navigation("SaleOrderPayments");
                });

            modelBuilder.Entity("Focus.Domain.Entities.PaySchedule", b =>
                {
                    b.Navigation("RunPayrolls");
                });

            modelBuilder.Entity("Focus.Domain.Entities.PriceLabeling", b =>
                {
                    b.Navigation("PriceRecords");
                });

            modelBuilder.Entity("Focus.Domain.Entities.PrintSetting", b =>
                {
                    b.Navigation("PrintOptions");
                });

            modelBuilder.Entity("Focus.Domain.Entities.Process", b =>
                {
                    b.Navigation("ProcessContractors");

                    b.Navigation("ProcessItems");
                });

            modelBuilder.Entity("Focus.Domain.Entities.Product", b =>
                {
                    b.Navigation("BomRawProducts");

                    b.Navigation("BomSaleOrderItems");

                    b.Navigation("BranchItems");

                    b.Navigation("BundleCategories");

                    b.Navigation("ContractorItems");

                    b.Navigation("CreditNoteItems");

                    b.Navigation("DeliveryChallanItems");

                    b.Navigation("DeliveryChallanReserverdItems");

                    b.Navigation("GetPromotionOfferItems");

                    b.Navigation("GetPromotionOffers");

                    b.Navigation("InquiryItems");

                    b.Navigation("Inventories");

                    b.Navigation("InventoryBlindDetails");

                    b.Navigation("MobileOrderItems");

                    b.Navigation("PriceRecords");

                    b.Navigation("ProcessItems");

                    b.Navigation("ProductSizes");

                    b.Navigation("PromotionOfferItems");

                    b.Navigation("PromotionOffers");

                    b.Navigation("PurchaseItems");

                    b.Navigation("PurchasePostItems");

                    b.Navigation("QuotationTemplateItems");

                    b.Navigation("RecipeItems");

                    b.Navigation("RecipeNos");

                    b.Navigation("ReparingItems");

                    b.Navigation("SaleItems");

                    b.Navigation("SampleRequestItems");

                    b.Navigation("SampleRequests");

                    b.Navigation("StockReceivedItems");

                    b.Navigation("StockRequestItems");

                    b.Navigation("StockTransferItems");

                    b.Navigation("Stocks");

                    b.Navigation("WareHouseTransferItems");
                });

            modelBuilder.Entity("Focus.Domain.Entities.ProductGroup", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("PromotionOffers");
                });

            modelBuilder.Entity("Focus.Domain.Entities.ProductionBatch", b =>
                {
                    b.Navigation("BatchProcesses");

                    b.Navigation("GatePasses");

                    b.Navigation("ProductionBatchItems");
                });

            modelBuilder.Entity("Focus.Domain.Entities.ProductMaster", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Focus.Domain.Entities.PromotionOffer", b =>
                {
                    b.Navigation("BundleOfferBranches");

                    b.Navigation("Products");

                    b.Navigation("PromotionOfferItems");

                    b.Navigation("SaleItems");
                });

            modelBuilder.Entity("Focus.Domain.Entities.PromotionOfferItem", b =>
                {
                    b.Navigation("SaleItems");
                });

            modelBuilder.Entity("Focus.Domain.Entities.Purchase", b =>
                {
                    b.Navigation("PurchaseInvoiceActions");

                    b.Navigation("PurchaseInvoiceAttachments");

                    b.Navigation("PurchaseItems");
                });

            modelBuilder.Entity("Focus.Domain.Entities.PurchaseBill", b =>
                {
                    b.Navigation("BillAttachments");

                    b.Navigation("DailyExpenses");

                    b.Navigation("PaymentVouchers");

                    b.Navigation("PurchaseBillItems");

                    b.Navigation("PurchaseOrderExpenses");

                    b.Navigation("PurchasePostExpenses");
                });

            modelBuilder.Entity("Focus.Domain.Entities.PurchaseOrder", b =>
                {
                    b.Navigation("GoodReceiveNotes");

                    b.Navigation("PurchaseAttachments");

                    b.Navigation("PurchaseOrderActions");

                    b.Navigation("PurchaseOrderExpenses");

                    b.Navigation("PurchaseOrderItems");

                    b.Navigation("PurchaseOrderPayments");

                    b.Navigation("PurchaseOrderVersions");

                    b.Navigation("PurchasePosts");

                    b.Navigation("Purchases");
                });

            modelBuilder.Entity("Focus.Domain.Entities.PurchaseOrderExpense", b =>
                {
                    b.Navigation("PaymentVoucherAttachments");
                });

            modelBuilder.Entity("Focus.Domain.Entities.PurchaseOrderVersion", b =>
                {
                    b.Navigation("PurchaseOrderItems");
                });

            modelBuilder.Entity("Focus.Domain.Entities.PurchasePost", b =>
                {
                    b.Navigation("CreditNotes");

                    b.Navigation("PurchaseInvoiceActions");

                    b.Navigation("PurchaseInvoiceAttachments");

                    b.Navigation("PurchasePostExpenses");

                    b.Navigation("PurchasePostItems");
                });

            modelBuilder.Entity("Focus.Domain.Entities.PurchasePostItem", b =>
                {
                    b.Navigation("SaleSizeAssortments");
                });

            modelBuilder.Entity("Focus.Domain.Entities.QuotationTemplate", b =>
                {
                    b.Navigation("QuotationTemplateItems");
                });

            modelBuilder.Entity("Focus.Domain.Entities.RecipeNo", b =>
                {
                    b.Navigation("BatchCostings");

                    b.Navigation("ProductionBatchs");

                    b.Navigation("RecipeAssortments");

                    b.Navigation("RecipeItems");
                });

            modelBuilder.Entity("Focus.Domain.Entities.Region", b =>
                {
                    b.Navigation("Contacts");

                    b.Navigation("Sales");
                });

            modelBuilder.Entity("Focus.Domain.Entities.ReparingOrder", b =>
                {
                    b.Navigation("PaymentVouchers");

                    b.Navigation("ReparingItems");
                });

            modelBuilder.Entity("Focus.Domain.Entities.ReparingOrderType", b =>
                {
                    b.Navigation("AcessoryIncludes");

                    b.Navigation("MultiAcessoryIncludes");

                    b.Navigation("MultiProblems");

                    b.Navigation("MultiUpsDescriptions");

                    b.Navigation("MultiWarrantyCategories");

                    b.Navigation("Problems");

                    b.Navigation("UpsDescriptions");

                    b.Navigation("WarrantyCategories");
                });

            modelBuilder.Entity("Focus.Domain.Entities.RunPayroll", b =>
                {
                    b.Navigation("RunPayrollDetails");
                });

            modelBuilder.Entity("Focus.Domain.Entities.RunPayrollDetail", b =>
                {
                    b.Navigation("RunPayrollSalaryDetails");
                });

            modelBuilder.Entity("Focus.Domain.Entities.SalaryTemplate", b =>
                {
                    b.Navigation("SalaryAllowances");

                    b.Navigation("SalaryContributions");

                    b.Navigation("SalaryDeductions");
                });

            modelBuilder.Entity("Focus.Domain.Entities.Sale", b =>
                {
                    b.Navigation("CreditNotes");

                    b.Navigation("DeliveryChallansForSales");

                    b.Navigation("SaleInvoiceAdvancePayments");

                    b.Navigation("SaleInvoiceDiscounts");

                    b.Navigation("SaleItems");

                    b.Navigation("SalePayments");

                    b.Navigation("SaleSizeAssortments");
                });

            modelBuilder.Entity("Focus.Domain.Entities.SaleItem", b =>
                {
                    b.Navigation("SaleSizeAssortments");
                });

            modelBuilder.Entity("Focus.Domain.Entities.SaleOrder", b =>
                {
                    b.Navigation("DeliveryChallansForSaleOrders");

                    b.Navigation("DispatchNotes");

                    b.Navigation("ImportExportItems");

                    b.Navigation("ProductionBatchs");

                    b.Navigation("QuotationSales");

                    b.Navigation("SaleInvoiceAdvancePayments");

                    b.Navigation("SaleOrderItems");

                    b.Navigation("SaleOrderPayments");

                    b.Navigation("SaleOrderVersions");

                    b.Navigation("Sales");
                });

            modelBuilder.Entity("Focus.Domain.Entities.SaleOrderVersion", b =>
                {
                    b.Navigation("SaleOrderItems");
                });

            modelBuilder.Entity("Focus.Domain.Entities.SampleRequest", b =>
                {
                    b.Navigation("RecipeNos");

                    b.Navigation("SampleRequestItems");
                });

            modelBuilder.Entity("Focus.Domain.Entities.ShiftAssign", b =>
                {
                    b.Navigation("ShiftEmployeeAssigns");

                    b.Navigation("ShiftRuns");
                });

            modelBuilder.Entity("Focus.Domain.Entities.ShiftRun", b =>
                {
                    b.Navigation("ShiftRunEmployees");
                });

            modelBuilder.Entity("Focus.Domain.Entities.Size", b =>
                {
                    b.Navigation("ProductSizes");

                    b.Navigation("Products");

                    b.Navigation("SaleSizeAssortments");
                });

            modelBuilder.Entity("Focus.Domain.Entities.StockAdjustment", b =>
                {
                    b.Navigation("StockAdjustmentDetails");
                });

            modelBuilder.Entity("Focus.Domain.Entities.StockReceived", b =>
                {
                    b.Navigation("StockReceivedItems");
                });

            modelBuilder.Entity("Focus.Domain.Entities.StockRequest", b =>
                {
                    b.Navigation("StockRequestItems");

                    b.Navigation("StockTransfer");
                });

            modelBuilder.Entity("Focus.Domain.Entities.StockTransfer", b =>
                {
                    b.Navigation("StockReceived");

                    b.Navigation("StockTransferItems");
                });

            modelBuilder.Entity("Focus.Domain.Entities.TaxRate", b =>
                {
                    b.Navigation("AutoPurchaseTemplateItems");

                    b.Navigation("BranchVouchers");

                    b.Navigation("Contacts");

                    b.Navigation("CreditNoteItems");

                    b.Navigation("DailyExpenseDetails");

                    b.Navigation("GoodReceiveNoteItems");

                    b.Navigation("PaymentRefunds");

                    b.Navigation("PaymentVouchers");

                    b.Navigation("Products");

                    b.Navigation("PurchaseItems");

                    b.Navigation("PurchaseOrderExpenses");

                    b.Navigation("PurchaseOrderItems");

                    b.Navigation("PurchasePostExpenses");

                    b.Navigation("PurchasePostItems");

                    b.Navigation("SaleItems");

                    b.Navigation("SaleOrderItems");

                    b.Navigation("SaleOrders");

                    b.Navigation("SaleUnRegisteredTaxes");

                    b.Navigation("Sales");

                    b.Navigation("StockAdjustments");
                });

            modelBuilder.Entity("Focus.Domain.Entities.TaxSalary", b =>
                {
                    b.Navigation("SalaryTaxSlabs");
                });

            modelBuilder.Entity("Focus.Domain.Entities.TemporaryCashIssue", b =>
                {
                    b.Navigation("TemporaryCashIssueExpenses");

                    b.Navigation("TemporaryCashIssueItems");

                    b.Navigation("TemporaryCashReturns");
                });

            modelBuilder.Entity("Focus.Domain.Entities.TemporaryCashRequest", b =>
                {
                    b.Navigation("TemporaryCashIssues");

                    b.Navigation("TemporaryCashRequestItems");
                });

            modelBuilder.Entity("Focus.Domain.Entities.Terminal", b =>
                {
                    b.Navigation("TerminalCategories");

                    b.Navigation("UserTerminals");
                });

            modelBuilder.Entity("Focus.Domain.Entities.Unit", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Focus.Domain.Entities.Warehouse", b =>
                {
                    b.Navigation("BatchProcesses");

                    b.Navigation("CreditNoteItems");

                    b.Navigation("GetPurchasePostItems");

                    b.Navigation("InventoryBlinds");

                    b.Navigation("ProductionBatchItems");

                    b.Navigation("PurchaseItems");

                    b.Navigation("RecipeItems");

                    b.Navigation("SaleItems");

                    b.Navigation("SaleOrderItems");

                    b.Navigation("StockAdjustmentDetails");

                    b.Navigation("StockAdjustments");

                    b.Navigation("Stocks");

                    b.Navigation("WareHouseTransfers");
                });

            modelBuilder.Entity("Focus.Domain.Entities.WareHouseTransfer", b =>
                {
                    b.Navigation("WareHouseTransferItems");
                });

            modelBuilder.Entity("Focus.Domain.Entities.WarrantyType", b =>
                {
                    b.Navigation("PurchasePostItems");

                    b.Navigation("StockAdjustmentDetails");
                });

            modelBuilder.Entity("Focus.Domain.Entities.WeekHoliday", b =>
                {
                    b.Navigation("DeliveryHolidays");
                });

            modelBuilder.Entity("Focus.Domain.Entities.YearlyPeriod", b =>
                {
                    b.Navigation("CompanySubmissionPeriods");
                });

            modelBuilder.Entity("Focus.Domain.Entities.Zone", b =>
                {
                    b.Navigation("Employees");
                });
#pragma warning restore 612, 618
        }
    }
}
